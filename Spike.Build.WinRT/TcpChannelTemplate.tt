<#
/************************************************************************
*
* Copyright (C) 2009-2014 Misakai Ltd
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* 
*************************************************************************/
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="Spike.Build.Model" name="Model" #>

using Spike.Network.Packets;
using Spike.Network.CustomTypes;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Spike.Network
{
	public class TcpChannel : TcpChannelBase<TcpChannel>
	{
		//Events
<#		foreach(var receive in Model.Receives)
		{ #>		
		public event Action<TcpChannel, <#= receive.Name #>> <#= receive.Name #>; 
<#		} #>
		    
		//Sends        
<#		foreach(var send in Model.Sends)
		{ #>		
		public async void <#= send.Name #>(<#	
			var first = true;
			foreach(var member in send.Members){
				if(!first)
					Write(", ");

				Write(WinRTBuilder.GetNativeType(member));
				Write(" ");
				Write(member.Name);
				first = false;
			}
		#>)
		{
			BeginNewPacket(0x<#= send.Id.ToString("X") #>);
<#			foreach(var member in send.Members)
			{ #>
			PacketWrite(<#= member.Name #>);
<#			} #>
			await SendPacket(<#= send.Compressed ? "true" : "false" #>);
		}		 
<#		} #>

		//Dispatcher
		protected override void OnReceive(uint key)
		{
			switch (key)
			{
<#				foreach(var receive in Model.Receives)
				{ #>				
				case 0x<#= receive.Id.ToString("X") #>u:
				{
					var packet = new <#= receive.Name #>();
					BeginReadPacket(<#= receive.Compressed ? "true" : "false" #>);
					
<#					foreach(var member in receive.Members){ #>
					packet.<#= member.Name #> = PacketRead<#= member.IsList ? "ListOf" : string.Empty #><#= member.Type #>();
<#					} #>

					//Now Call event
					if (<#= receive.Name #> != null)
						<#= receive.Name #>(this, packet);

					break;
				}
<#				} #>

				default:
					Debug.WriteLine("Unknow packet : {0:X}", key);
					return;
			}
		}

		//Custom Type
<#		foreach(var customType in Model.CustomTypes)
		{ #>
		protected <#= customType.Name #> PacketRead<#= customType.Name #>()
        {
            var value = new <#= customType.Name #>();
<#			foreach(var member in customType.Members)
			{ #>
			value.<#= member.Name #> = PacketRead<#= member.IsList ? "ListOf" : string.Empty #><#= member.Type #>();
<#			} #>
			return value;
        }
        protected void PacketWrite(<#= customType.Name #> value)
        {
            <#			foreach(var member in customType.Members)
			{ #>
			PacketWrite(value.<#= member.Name #>);
<#			} #>
        }

        protected <#= customType.Name #>[] PacketReadListOf<#= customType.Name #>()
        {
            var value = new <#= customType.Name #>[PacketReadInt32()];
            for (int index = 0; index < value.Length; index++)
                value[index] = PacketRead<#= customType.Name #>();
            return value;
        }
        protected void PacketWrite(<#= customType.Name #>[] value)
        {
            PacketWrite(value.Length);
            foreach (var element in value)
                PacketWrite(element);
        }
<#				} #>

	}
}