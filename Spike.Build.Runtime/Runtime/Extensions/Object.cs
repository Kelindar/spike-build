#region Copyright (c) 2009-2013 Misakai Ltd.
/*************************************************************************
 * 
 * ROMAN ATACHIANTS - CONFIDENTIAL
 * ===============================
 * 
 * THIS PROGRAM IS CONFIDENTIAL  AND PROPRIETARY TO  ROMAN  ATACHIANTS AND 
 * MAY  NOT  BE  REPRODUCED,  PUBLISHED  OR  DISCLOSED TO  OTHERS  WITHOUT 
 * ROMAN ATACHIANTS' WRITTEN AUTHORIZATION.
 *
 * COPYRIGHT (c) 2009 - 2012. THIS WORK IS UNPUBLISHED.
 * All Rights Reserved.
 * 
 * NOTICE:  All information contained herein is,  and remains the property 
 * of Roman Atachiants  and its  suppliers,  if any. The  intellectual and 
 * technical concepts contained herein are proprietary to Roman Atachiants
 * and  its suppliers and may be  covered  by U.S.  and  Foreign  Patents, 
 * patents in process, and are protected by trade secret or copyright law.
 * 
 * Dissemination of this information  or reproduction  of this material is 
 * strictly  forbidden  unless prior  written permission  is obtained from 
 * Roman Atachiants.
*************************************************************************/
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.IO;
using System.Collections;

namespace System.Linq
{
    internal static class ObjectExtensions
    {
        /// <summary>
        /// Dumps the object's properties and fields to a string
        /// </summary>
        internal static string Dump(this Object o)
        {
            StringBuilder sb = new StringBuilder();

            // Include the type of the object
            System.Type type = o.GetType();
            sb.Append("Type: " + type.Name);

            // Include information for each Field
            sb.Append("\r\n\r\nFields:");
            System.Reflection.FieldInfo[] fi = type.GetFields();
            if (fi.Length > 0)
            {
                foreach (FieldInfo f in fi)
                {
                    try
                    {
                        var value = f.GetValue(o);
                        if (value is IEnumerable)
                        {
                            sb.Append(String.Format("\r\n {0} = ", f));
                            foreach (var v in value as IEnumerable)
                                sb.Append("\r\n   * " + v.ToString());
                        }
                        else
                        {
                            sb.Append(String.Format("\r\n {0} = {1}", f, value));
                        }
                    }
                    catch { }
                }
            }
            else
                sb.Append("\r\n None");

            // Include information for each Property
            sb.Append("\r\n\r\nProperties:");
            System.Reflection.PropertyInfo[] pi = type.GetProperties();
            if (pi.Length > 0)
            {
                foreach (PropertyInfo f in pi)
                {
                    try
                    {
                        var value = f.GetValue(o, null);
                        if (value is IEnumerable)
                        {
                            sb.Append(String.Format("\r\n {0} = ", f));
                            foreach (var v in value as IEnumerable)
                                sb.Append("\r\n   * " + v.ToString() );
                        }
                        else
                        {
                            sb.Append(String.Format("\r\n {0} = {1}", f, value));
                        }
                    }
                    catch { }
                }
            }
            else
                sb.Append("\r\n None");

            return sb.ToString();
        }

        /// <summary>
        /// Dumps an object to autogenerated file
        /// </summary>
        internal static void DumpToFile(this Object o)
        {
            var text = Dump(o);
            var now  = DateTime.Now;
            var filename = String.Format("{0} {1}-{2}-{3} {4}.txt", o.GetType().Name, now.Hour, now.Minute, now.Second, now.Millisecond);
            File.WriteAllText(filename, text);
        }

    }

}
