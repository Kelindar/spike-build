#region Copyright (c) 2009-2014 Misakai Ltd.
/*************************************************************************
* 
* This file is part of Spike.Build Project.
*
* Spike.Build is free software: you can redistribute it and/or modify it 
* under the terms of the GNU General Public License as published by the 
* Free Software Foundation, either version 3 of the License, or (at your
* option) any later version.
*
* Foobar is distributed in the hope that it will be useful, but WITHOUT 
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public 
* License for more details.
* 
* You should have received a copy of the GNU General Public License 
* along with Foobar. If not, see http://www.gnu.org/licenses/.
*************************************************************************/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.IO;
using System.Collections;

namespace System.Linq
{
    internal static class ObjectExtensions
    {
        /// <summary>
        /// Dumps the object's properties and fields to a string
        /// </summary>
        internal static string Dump(this Object o)
        {
            StringBuilder sb = new StringBuilder();

            // Include the type of the object
            System.Type type = o.GetType();
            sb.Append("Type: " + type.Name);

            // Include information for each Field
            sb.Append("\r\n\r\nFields:");
            System.Reflection.FieldInfo[] fi = type.GetFields();
            if (fi.Length > 0)
            {
                foreach (FieldInfo f in fi)
                {
                    try
                    {
                        var value = f.GetValue(o);
                        if (value is IEnumerable)
                        {
                            sb.Append(String.Format("\r\n {0} = ", f));
                            foreach (var v in value as IEnumerable)
                                sb.Append("\r\n   * " + v.ToString());
                        }
                        else
                        {
                            sb.Append(String.Format("\r\n {0} = {1}", f, value));
                        }
                    }
                    catch { }
                }
            }
            else
                sb.Append("\r\n None");

            // Include information for each Property
            sb.Append("\r\n\r\nProperties:");
            System.Reflection.PropertyInfo[] pi = type.GetProperties();
            if (pi.Length > 0)
            {
                foreach (PropertyInfo f in pi)
                {
                    try
                    {
                        var value = f.GetValue(o, null);
                        if (value is IEnumerable)
                        {
                            sb.Append(String.Format("\r\n {0} = ", f));
                            foreach (var v in value as IEnumerable)
                                sb.Append("\r\n   * " + v.ToString() );
                        }
                        else
                        {
                            sb.Append(String.Format("\r\n {0} = {1}", f, value));
                        }
                    }
                    catch { }
                }
            }
            else
                sb.Append("\r\n None");

            return sb.ToString();
        }

        /// <summary>
        /// Dumps an object to autogenerated file
        /// </summary>
        internal static void DumpToFile(this Object o)
        {
            var text = Dump(o);
            var now  = DateTime.Now;
            var filename = String.Format("{0} {1}-{2}-{3} {4}.txt", o.GetType().Name, now.Hour, now.Minute, now.Second, now.Millisecond);
            File.WriteAllText(filename, text);
        }

    }

}
