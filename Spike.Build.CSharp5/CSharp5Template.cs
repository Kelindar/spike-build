// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Spike.Build.CSharp5
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class CSharp5Template : CSharp5TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System." +
                    "Net.Sockets;\r\nusing System.IO;\r\nusing System.Net.Security;\r\nusing System.Diagnos" +
                    "tics;\r\n\r\nnamespace Spike.Network\r\n{\r\n\t");
            
            #line 18 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 if(Target == null || Target == "LZF") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("\t/*\r\n\t* Copyright (c) 2005 Oren J. Maurice <oymaurice@hazorea.org.il>\r\n\t* \r\n\t* Re" +
                    "distribution and use in source and binary forms, with or without modifica-\r\n\t* t" +
                    "ion, are permitted provided that the following conditions are met:\r\n\t* \r\n\t*   1." +
                    "  Redistributions of source code must retain the above copyright notice,\r\n\t*    " +
                    "   this list of conditions and the following disclaimer.\r\n\t* \r\n\t*   2.  Redistri" +
                    "butions in binary form must reproduce the above copyright\r\n\t*       notice, this" +
                    " list of conditions and the following disclaimer in the\r\n\t*       documentation " +
                    "and/or other materials provided with the distribution.\r\n\t* \r\n\t*   3.  The name o" +
                    "f the author may not be used to endorse or promote products\r\n\t*       derived fr" +
                    "om this software without specific prior written permission.\r\n\t* \r\n\t* THIS SOFTWA" +
                    "RE IS PROVIDED BY THE AUTHOR ``AS IS\'\' AND ANY EXPRESS OR IMPLIED\r\n\t* WARRANTIES" +
                    ", INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\r\n\t* CHANTABILITY" +
                    " AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\r\n\t* EVENT SHALL THE" +
                    " AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\r\n\t* CIAL, EXEMPLARY" +
                    ", OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n\t* PROCUREMENT OF SU" +
                    "BSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n\t* OR BUSINESS INTER" +
                    "RUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n\t* WHETHER IN CONTRACT," +
                    " STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\r\n\t* ERWISE) ARISING IN " +
                    "ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\r\n\t* OF THE POSSIBILITY " +
                    "OF SUCH DAMAGE.\r\n\t*\r\n\t* Alternatively, the contents of this file may be used und" +
                    "er the terms of\r\n\t* the GNU General Public License version 2 (the \"GPL\"), in whi" +
                    "ch case the\r\n\t* provisions of the GPL are applicable instead of the above. If yo" +
                    "u wish to\r\n\t* allow the use of your version of this file only under the terms of" +
                    " the\r\n\t* GPL and not to allow others to use your version of this file under the\r" +
                    "\n\t* BSD license, indicate your decision by deleting the provisions above and\r\n\t*" +
                    " replace them with the notice and other provisions required by the GPL. If\r\n\t* y" +
                    "ou do not delete the provisions above, a recipient may use your version\r\n\t* of t" +
                    "his file under either the BSD or the GPL.\r\n\t*/\r\n\t\r\n\t/// <summary>\r\n\t/// Summary " +
                    "description for CLZF.\r\n\t/// </summary>\r\n\tpublic class CLZF\r\n\t{\r\n\t\t// CRC32 data " +
                    "& function\r\n\t\tUInt32 []crc_32_tab = new UInt32[256]\r\n\t\t{\r\n\t\t\t0x00000000, 0x77073" +
                    "096, 0xee0e612c, 0x990951ba, 0x076dc419,\r\n\t\t\t0x706af48f, 0xe963a535, 0x9e6495a3," +
                    " 0x0edb8832, 0x79dcb8a4,\r\n\t\t\t0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe" +
                    "7b82d07,\r\n\t\t\t0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\r\n\t\t\t0x1" +
                    "adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\r\n\t\t\t0x646ba8c0, 0xfd62f" +
                    "97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\r\n\t\t\t0xfa0f3d63, 0x8d080df5, 0x3b6e20c8," +
                    " 0x4c69105e, 0xd56041e4,\r\n\t\t\t0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa" +
                    "50ab56b,\r\n\t\t\t0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\r\n\t\t\t0x4" +
                    "5df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\r\n\t\t\t0xc8d75180, 0xbfd06" +
                    "116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\r\n\t\t\t0xb8bda50f, 0x2802b89e, 0x5f058808," +
                    " 0xc60cd9b2, 0xb10be924,\r\n\t\t\t0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x7" +
                    "6dc4190,\r\n\t\t\t0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\r\n\t\t\t0x9" +
                    "fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\r\n\t\t\t0xe10e9818, 0x7f6a0" +
                    "dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\r\n\t\t\t0x6b6b51f4, 0x1c6c6162, 0x856530d8," +
                    " 0xf262004e, 0x6c0695ed,\r\n\t\t\t0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x1" +
                    "2b7e950,\r\n\t\t\t0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\r\n\t\t\t0xf" +
                    "bd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\r\n\t\t\t0x4adfa541, 0x3dd89" +
                    "5d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\r\n\t\t\t0x346ed9fc, 0xad678846, 0xda60b8d0," +
                    " 0x44042d73, 0x33031de5,\r\n\t\t\t0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xb" +
                    "e0b1010,\r\n\t\t\t0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\r\n\t\t\t0x5" +
                    "edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\r\n\t\t\t0x2eb40d81, 0xb7bd5" +
                    "c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\r\n\t\t\t0x03b6e20c, 0x74b1d29a, 0xead54739," +
                    " 0x9dd277af, 0x04db2615,\r\n\t\t\t0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7" +
                    "a6a5aa8,\r\n\t\t\t0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\r\n\t\t\t0x8" +
                    "708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\r\n\t\t\t0x196c3671, 0x6e6b0" +
                    "6e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\r\n\t\t\t0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9," +
                    " 0x17b7be43, 0x60b08ed5,\r\n\t\t\t0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd" +
                    "1bb67f1,\r\n\t\t\t0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\r\n\t\t\t0x3" +
                    "6034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\r\n\t\t\t0x4669be79, 0xcb61b" +
                    "38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\r\n\t\t\t0xcc0c7795, 0xbb0b4703, 0x220216b9," +
                    " 0x5505262f, 0xc5ba3bbe,\r\n\t\t\t0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb" +
                    "5d0cf31,\r\n\t\t\t0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\r\n\t\t\t0x0" +
                    "26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\r\n\t\t\t0x95bf4a82, 0xe2b87" +
                    "a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\r\n\t\t\t0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21," +
                    " 0x86d3d2d4, 0xf1d4e242,\r\n\t\t\t0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6" +
                    "fb077e1,\r\n\t\t\t0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\r\n\t\t\t0x8" +
                    "f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\r\n\t\t\t0xd70dd2ee, 0x4e048" +
                    "354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\r\n\t\t\t0x4969474d, 0x3e6e77db, 0xaed16a4a," +
                    " 0xd9d65adc, 0x40df0b66,\r\n\t\t\t0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x3" +
                    "0b5ffe9,\r\n\t\t\t0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\r\n\t\t\t0xc" +
                    "dd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\r\n\t\t\t0x5d681b02, 0x2a6f2" +
                    "b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\r\n\t\t\t0x2d02ef8d\r\n\t\t};\r\n\r\n\t\tpublic UInt32" +
                    " crc32(UInt32 OldCRC,byte NewData) \r\n\t\t{\r\n\t\t\treturn crc_32_tab[(OldCRC & 0xff) ^" +
                    " NewData] ^ (OldCRC >> 8);\r\n\t\t}\r\n\r\n\r\n\t\t/// <summary>\r\n\t\t/// LZF Compressor\r\n\t\t//" +
                    "/ </summary>\r\n\r\n\t\tUInt32 HLOG=14;\r\n\t\tUInt32 HSIZE=(1<<14);\r\n\r\n\t\t/*\r\n\t\t* don\'t pl" +
                    "ay with this unless you benchmark!\r\n\t\t* decompression is not dependent on the ha" +
                    "sh function\r\n\t\t* the hashing function might seem strange, just believe me\r\n\t\t* i" +
                    "t works ;)\r\n\t\t*/\r\n\t\tUInt32 MAX_LIT=(1 <<  5);\r\n\t\tUInt32 MAX_OFF=(1 << 13);\r\n\t\tUI" +
                    "nt32 MAX_REF=((1 <<  8) + (1 << 3));\r\n\r\n\t\tUInt32 FRST(byte[] Array,UInt32 ptr) \r" +
                    "\n\t\t{\r\n\t\t\treturn (UInt32)(((Array[ptr]) << 8) | Array[ptr+1]);\r\n\t\t}\r\n\r\n\t\tUInt32 N" +
                    "EXT(UInt32 v,byte[] Array,UInt32 ptr)\r\n\t\t{\r\n\t\t\treturn ((v) << 8) | Array[ptr+2];" +
                    "\r\n\t\t}\r\n\r\n\t\tUInt32 IDX(UInt32 h) \r\n\t\t{\r\n\t\t\treturn ((h ^ (h << 5)) >> (int)(((3*8 " +
                    "- HLOG)) - h*5) & (HSIZE - 1));\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t* compressed format\r\n\t\t*\r\n\t\t* 00" +
                    "0LLLLL <L+1>    ; literal\r\n\t\t* LLLOOOOO oooooooo ; backref L\r\n\t\t* 111OOOOO LLLLL" +
                    "LLL oooooooo ; backref L+7\r\n\t\t*\r\n\t\t*/\r\n\r\n\t\tpublic int lzf_compress (byte[] in_da" +
                    "ta, int in_len,byte[] out_data, int out_len)\r\n\t\t{\r\n\t\t\tint c;\r\n\t\t\tlong []htab=new" +
                    " long[1<<14];\r\n\t\t\tfor (c=0;c<1<<14;c++)\r\n\t\t\t{\r\n\t\t\t\thtab[c]=0;\r\n\t\t\t}\r\n\r\n\t\t\tlong h" +
                    "slot;\r\n\t\t\tUInt32 iidx = 0;\r\n\t\t\tUInt32 oidx = 0;\r\n\t\t\t//byte *in_end  = ip + in_le" +
                    "n;\r\n\t\t\t//byte *out_end = op + out_len;\r\n\t\t\tlong reference;\r\n\r\n\t\t\tUInt32 hval = F" +
                    "RST (in_data,iidx);\r\n\t\t\tlong off;\r\n\t\t\tint lit = 0;\r\n\r\n\t\t\tfor (;;)\r\n\t\t\t\t{\r\n\t\t\t\tif" +
                    " (iidx < in_len - 2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\thval = NEXT (hval, in_data,iidx);\r\n\t\t\t\t\thslot" +
                    " = IDX (hval);\r\n\t\t\t\t\treference = htab[hslot]; \r\n\t\t\t\t\thtab[hslot] = (long)iidx;\r\n" +
                    "\r\n\t\t\t\t\tif ((off = iidx - reference - 1) < MAX_OFF \r\n\t\t\t\t\t\t&& iidx + 4 < in_len \r" +
                    "\n\t\t\t\t\t\t&& reference > 0\r\n\t\t\t\t\t\t&& in_data[reference+0] == in_data[iidx+0]\r\n\t\t\t\t\t" +
                    "\t&& in_data[reference+1] == in_data[iidx+1]\r\n\t\t\t\t\t\t&& in_data[reference+2] == in" +
                    "_data[iidx+2]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t/* match found at *reference++ */\r\n\t\t\t\t\t\t" +
                    "UInt32 len = 2;\r\n\t\t\t\t\t\tUInt32 maxlen = (UInt32)in_len - iidx - len;\r\n\t\t\t\t\t\tmaxle" +
                    "n = maxlen > MAX_REF ? MAX_REF : maxlen;\r\n\r\n\t\t\t\t\t\tif (oidx + lit + 1 + 3 >= out_" +
                    "len)\r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t\tlen++;\r\n\t\t\t\t\t\twhile (len < maxlen && " +
                    "in_data[reference+len] == in_data[iidx+len]);\r\n\r\n\t\t\t\t\t\tif (lit!=0)\r\n\t\t\t\t\t\t\t{\r\n\t\t" +
                    "\t\t\t\t\tout_data[oidx++] = (byte)(lit - 1);\r\n\t\t\t\t\t\t\tlit = -lit;\r\n\t\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t\t" +
                    "\tout_data[oidx++] = in_data[iidx+lit];\r\n\t\t\t\t\t\t\twhile ((++lit)!=0);\r\n\t\t\t\t\t\t\t}\r\n\r\n" +
                    "\t\t\t\t\t\tlen -= 2;\r\n\t\t\t\t\t\tiidx++;\r\n\r\n\t\t\t\t\t\tif (len < 7)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tout_data[" +
                    "oidx++] = (byte)((off >> 8) + (len << 5));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t" +
                    "\t\t\tout_data[oidx++] = (byte)((off >> 8) + (  7 << 5));\r\n\t\t\t\t\t\t\tout_data[oidx++] " +
                    "= (byte)(len - 7);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tout_data[oidx++] = (byte)off;\r\n\r\n\t\t\t\t\t\tiid" +
                    "x += len-1;\r\n\t\t\t\t\t\thval = FRST (in_data,iidx);\r\n\r\n\t\t\t\t\t\thval = NEXT (hval,in_dat" +
                    "a, iidx);\r\n\t\t\t\t\t\thtab[IDX (hval)] = iidx;\r\n\t\t\t\t\t\tiidx++;\r\n\r\n\t\t\t\t\t\thval = NEXT (h" +
                    "val, in_data,iidx);\r\n\t\t\t\t\t\thtab[IDX (hval)] = iidx;\r\n\t\t\t\t\t\tiidx++;\r\n\t\t\t\t\t\tcontin" +
                    "ue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\telse if (iidx == in_len)\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t/* one mo" +
                    "re literal byte we must copy */\r\n\t\t\t\tlit++;\r\n\t\t\t\tiidx++;\r\n\r\n\t\t\t\tif (lit == MAX_L" +
                    "IT)\r\n\t\t\t\t\t{\r\n\t\t\t\t\tif (oidx + 1 + MAX_LIT >= out_len)\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tou" +
                    "t_data[oidx++] = (byte)(MAX_LIT - 1);\r\n\t\t\t\t\tlit = -lit;\r\n\t\t\t\t\tdo\r\n\t\t\t\t\t\tout_data" +
                    "[oidx++] = in_data[iidx+lit];\r\n\t\t\t\t\twhile ((++lit)!=0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\tif " +
                    "(lit!=0)\r\n\t\t\t\t{\r\n\t\t\t\tif (oidx + lit + 1 >= out_len)\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tout_d" +
                    "ata[oidx++] = (byte)(lit - 1);\r\n\t\t\t\tlit = -lit;\r\n\t\t\t\tdo\r\n\t\t\t\t\tout_data[oidx++] =" +
                    " in_data[iidx+lit];\r\n\t\t\t\twhile ((++lit)!=0);\r\n\t\t\t\t}\r\n\r\n\t\t\treturn (int)oidx;\r\n\t\t}" +
                    "\r\n\r\n\t\t/// <summary>\r\n\t\t/// LZF Decompressor\r\n\t\t/// </summary>\r\n\t\tpublic int lzf_" +
                    "decompress ( byte[] in_data, int in_len, byte[] out_data, int out_len)\r\n\t\t{\r\n\t\t\t" +
                    "UInt32 iidx=0;\r\n\t\t\tUInt32 oidx=0;\r\n\r\n\t\t\tdo\r\n\t\t\t\t{\r\n\t\t\t\tUInt32 ctrl = in_data[iid" +
                    "x++];\r\n\r\n\t\t\t\tif (ctrl < (1 << 5)) /* literal run */\r\n\t\t\t\t\t{\r\n\t\t\t\t\tctrl++;\r\n\r\n\t\t\t" +
                    "\t\tif (oidx + ctrl > out_len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t//SET_ERRNO (E2BIG);\r\n\t\t\t\t\t\treturn " +
                    "0;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdo\r\n\t\t\t\t\t\tout_data[oidx++] = in_data[iidx++];\r\n\t\t\t\t\twhile ((" +
                    "--ctrl)!=0);\r\n\t\t\t\t\t}\r\n\t\t\t\telse /* back reference */\r\n\t\t\t\t\t{\r\n\t\t\t\t\tUInt32 len = c" +
                    "trl >> 5;\r\n\r\n\t\t\t\t\tint reference = (int)(oidx - ((ctrl & 0x1f) << 8) - 1);\r\n\r\n\t\t\t" +
                    "\t\tif (len == 7)\r\n\t\t\t\t\t\tlen += in_data[iidx++];\r\n\t\t\t          \r\n\t\t\t\t\treference -=" +
                    " in_data[iidx++];\r\n\r\n\t\t\t\t\tif (oidx + len + 2 > out_len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t//SET_ER" +
                    "RNO (E2BIG);\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (reference < 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t" +
                    "\t\t//SET_ERRNO (EINVAL);\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\tout_data[oidx++]=out_d" +
                    "ata[reference++];\r\n\t\t\t\t\tout_data[oidx++]=out_data[reference++];\r\n\r\n\t\t\t\t\tdo\r\n\t\t\t\t" +
                    "\t\tout_data[oidx++]=out_data[reference++];\r\n\t\t\t\t\twhile ((--len)!=0);\r\n\t\t\t\t\t}\r\n\t\t\t" +
                    "\t}\r\n\t\t\twhile (iidx < in_len);\r\n\r\n\t\t\treturn (int)oidx;\r\n\t\t}\r\n\r\n\t\tpublic CLZF()\r\n\t" +
                    "\t{\r\n\t\t\t//\r\n\t\t\t// TODO: Add ructor logic here\r\n\t\t\t//\r\n\t\t}\r\n\t}\r\n\r\n\r\n");
            
            #line 18 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 19 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 if(Target == null || Target == "PacketWriter") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("    /// <summary>\r\n    /// Represents a packet writer that can be used to seriali" +
                    "ze packets.\r\n    /// </summary>\r\n    public sealed class PacketWriter\r\n    {\r\n  " +
                    "      private readonly int Capacity;\r\n        private byte[] Buffer;\r\n        pr" +
                    "ivate int Offset;\r\n\r\n        /// <summary>\r\n        /// Constructs a new packet " +
                    "writer.\r\n        /// </summary>\r\n        /// <param name=\"capacity\">The size of " +
                    "the buffer to allocate.</param>\r\n        /// <param name=\"key\">The</param>\r\n    " +
                    "    public PacketWriter(int capacity)\r\n        {\r\n            this.Capacity = ca" +
                    "pacity;\r\n            this.Buffer = new byte[capacity];\r\n            this.Offset " +
                    "= 0;\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /// Gets the underlying buff" +
                    "er \r\n        /// </summary>\r\n        /// <param name=\"compressed\">Whether we sho" +
                    "uld compress or not.</param>\r\n        /// <returns>The segment of the array </re" +
                    "turns>\r\n        public byte[] Flush(bool compressed)\r\n        {\r\n            if " +
                    "(compressed && this.Offset > 8)\r\n            {\r\n                // TODO: This sh" +
                    "ould be seriously improved\r\n                var packer = new CLZF();\r\n          " +
                    "      var uncompressedBytes = new byte[this.Offset - 8];\r\n                System" +
                    ".Buffer.BlockCopy(this.Buffer, 8, uncompressedBytes, 0, uncompressedBytes.Length" +
                    ");\r\n                var compressedBytes = new byte[this.Capacity];\r\n            " +
                    "    var size = packer.lzf_compress(uncompressedBytes, uncompressedBytes.Length, " +
                    "compressedBytes, compressedBytes.Length);\r\n                System.Buffer.BlockCo" +
                    "py(compressedBytes, 0, this.Buffer, 8, size);\r\n\r\n                // Update the n" +
                    "ew offset\r\n                this.Offset = size + 8;\r\n            }\r\n\r\n           " +
                    " // Write the current size\r\n            var length = this.Offset - 4;\r\n         " +
                    "   this.Buffer[0] = ((byte)(length >> 24));\r\n            this.Buffer[1] = ((byte" +
                    ")(length >> 16));\r\n            this.Buffer[2] = ((byte)(length >> 8));\r\n        " +
                    "    this.Buffer[3] = ((byte)length);\r\n\r\n            // Return a copy of the buff" +
                    "er, avoiding any shared state\r\n            var encoded = new byte[this.Offset];\r" +
                    "\n            System.Buffer.BlockCopy(this.Buffer, 0, encoded, 0, this.Offset);\r\n" +
                    "            return encoded;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Wri" +
                    "tes a packet key to the underlying buffer.\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"key\">The packet key to write.</param>\r\n        public void Begin(ui" +
                    "nt key)\r\n        {\r\n            this.Offset = 4;\r\n            this.Write(key);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying" +
                    " buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to w" +
                    "rite.</param>\r\n        public void Write(byte value)\r\n        {\r\n            thi" +
                    "s.Buffer[this.Offset++] = value;\r\n        }\r\n\r\n        /// <summary>\r\n        //" +
                    "/ Writes a value to the underlying buffer.\r\n        /// </summary>\r\n        /// " +
                    "<param name=\"value\">The value to write.</param>\r\n        public void Write(byte[" +
                    "] value)\r\n        {\r\n            Write(value.Length);\r\n            System.Buffer" +
                    ".BlockCopy(value, 0, this.Buffer, this.Offset, value.Length);\r\n            this." +
                    "Offset += value.Length;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes " +
                    "a value to the underlying buffer.\r\n        /// </summary>\r\n        /// <param na" +
                    "me=\"value\">The value to write.</param>\r\n        public void Write(ushort value)\r" +
                    "\n        {\r\n            Write((byte)(value >> 8));\r\n            Write((byte)valu" +
                    "e);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the under" +
                    "lying buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value" +
                    " to write.</param>\r\n        public void Write(ushort[] value)\r\n        {\r\n      " +
                    "      Write(value.Length);\r\n            foreach (var element in value)\r\n        " +
                    "    Write(element);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a va" +
                    "lue to the underlying buffer.\r\n        /// </summary>\r\n        /// <param name=\"" +
                    "value\">The value to write.</param>\r\n        public void Write(short value)\r\n    " +
                    "    {\r\n            Write((byte)(value >> 8));\r\n            Write((byte)value);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying" +
                    " buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to w" +
                    "rite.</param>\r\n        public void Write(short[] value)\r\n        {\r\n            " +
                    "Write(value.Length);\r\n            foreach (var element in value)\r\n            Wr" +
                    "ite(element);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to" +
                    " the underlying buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\"" +
                    ">The value to write.</param>\r\n        public void Write(uint value)\r\n        {\r\n" +
                    "            Write((byte)(value >> 24));\r\n            Write((byte)(value >> 16));" +
                    "\r\n            Write((byte)(value >> 8));\r\n            Write((byte)value);\r\n     " +
                    "   }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying buff" +
                    "er.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to write." +
                    "</param>\r\n        public void Write(uint[] value)\r\n        {\r\n            Write(" +
                    "value.Length);\r\n            foreach (var element in value)\r\n            Write(el" +
                    "ement);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the u" +
                    "nderlying buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The v" +
                    "alue to write.</param>\r\n        public void Write(int value)\r\n        {\r\n       " +
                    "     Write((byte)(value >> 24));\r\n            Write((byte)(value >> 16));\r\n     " +
                    "       Write((byte)(value >> 8));\r\n            Write((byte)value);\r\n        }\r\n\r" +
                    "\n        /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n  " +
                    "      /// </summary>\r\n        /// <param name=\"value\">The value to write.</param" +
                    ">\r\n        public void Write(int[] value)\r\n        {\r\n            Write(value.Le" +
                    "ngth);\r\n            foreach (var element in value)\r\n            Write(element);\r" +
                    "\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlyin" +
                    "g buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to " +
                    "write.</param>\r\n        public void Write(ulong value)\r\n        {\r\n            W" +
                    "rite((byte)(value >> 56));\r\n            Write((byte)(value >> 48));\r\n           " +
                    " Write((byte)(value >> 40));\r\n            Write((byte)(value >> 32));\r\n         " +
                    "   Write((byte)(value >> 24));\r\n            Write((byte)(value >> 16));\r\n       " +
                    "     Write((byte)(value >> 8));\r\n            Write((byte)value);\r\n        }\r\n\r\n " +
                    "       /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n    " +
                    "    /// </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r" +
                    "\n        public void Write(ulong[] value)\r\n        {\r\n            Write(value.Le" +
                    "ngth);\r\n            foreach (var element in value)\r\n            Write(element);\r" +
                    "\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlyin" +
                    "g buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to " +
                    "write.</param>\r\n        public void Write(long value)\r\n        {\r\n            Wr" +
                    "ite((byte)(value >> 56));\r\n            Write((byte)(value >> 48));\r\n            " +
                    "Write((byte)(value >> 40));\r\n            Write((byte)(value >> 32));\r\n          " +
                    "  Write((byte)(value >> 24));\r\n            Write((byte)(value >> 16));\r\n        " +
                    "    Write((byte)(value >> 8));\r\n            Write((byte)value);\r\n        }\r\n\r\n  " +
                    "      /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n     " +
                    "   /// </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r\n" +
                    "        public void Write(long[] value)\r\n        {\r\n            Write(value.Leng" +
                    "th);\r\n            foreach (var element in value)\r\n            Write(element);\r\n " +
                    "       }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying " +
                    "buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to wr" +
                    "ite.</param>\r\n        public void Write(bool value)\r\n        {\r\n            Writ" +
                    "e((byte)(value ? 1 : 0));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Write" +
                    "s a value to the underlying buffer.\r\n        /// </summary>\r\n        /// <param " +
                    "name=\"value\">The value to write.</param>\r\n        public void Write(bool[] value" +
                    ")\r\n        {\r\n            Write(value.Length);\r\n            foreach (var element" +
                    " in value)\r\n            Write(element);\r\n        }\r\n\r\n\r\n        /// <summary>\r\n " +
                    "       /// Writes a value to the underlying buffer.\r\n        /// </summary>\r\n   " +
                    "     /// <param name=\"value\">The value to write.</param>\r\n        public void Wr" +
                    "ite(float value)\r\n        {\r\n            var bytes = System.BitConverter.GetByte" +
                    "s(value);\r\n            for (var index = bytes.Length - 1;index >= 0 ;--index)\r\n " +
                    "           Write(bytes[index]);            \r\n        }\r\n\r\n        /// <summary>\r" +
                    "\n        /// Writes a value to the underlying buffer.\r\n        /// </summary>\r\n " +
                    "       /// <param name=\"value\">The value to write.</param>\r\n        public void " +
                    "Write(float[] value)\r\n        {\r\n            Write(value.Length);\r\n            f" +
                    "oreach (var element in value)\r\n            Write(element);\r\n        }\r\n\r\n       " +
                    " /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n        //" +
                    "/ </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r\n     " +
                    "   public void Write(double value)\r\n        {\r\n            var bytes = BitConver" +
                    "ter.GetBytes(value);\r\n            for (var index = bytes.Length - 1; index >= 0;" +
                    " --index)\r\n            Write(bytes[index]);\r\n        }\r\n\r\n        /// <summary>\r" +
                    "\n        /// Writes a value to the underlying buffer.\r\n        /// </summary>\r\n " +
                    "       /// <param name=\"value\">The value to write.</param>\r\n        public void " +
                    "Write(double[] value)\r\n        {\r\n            Write(value.Length);\r\n            " +
                    "foreach (var element in value)\r\n            Write(element);\r\n        }\r\n\r\n      " +
                    "  /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n        /" +
                    "// </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r\n    " +
                    "    public void Write(string value)\r\n        {\r\n            Write(System.Text.En" +
                    "coding.UTF8.GetBytes(value));\r\n        }\r\n\r\n        /// <summary>\r\n        /// W" +
                    "rites a value to the underlying buffer.\r\n        /// </summary>\r\n        /// <pa" +
                    "ram name=\"value\">The value to write.</param>\r\n        public void Write(string[]" +
                    " value)\r\n        {\r\n            Write(value.Length);\r\n            foreach (var e" +
                    "lement in value)\r\n            Write(element);\r\n        }\r\n\r\n        /// <summary" +
                    ">\r\n        /// Writes a value to the underlying buffer.\r\n        /// </summary>\r" +
                    "\n        /// <param name=\"value\">The value to write.</param>\r\n        public voi" +
                    "d Write(DateTime value)\r\n        {\r\n            Write((short)value.Year);\r\n     " +
                    "       Write((short)value.Month);\r\n            Write((short)value.Day);\r\n       " +
                    "     Write((short)value.Hour);\r\n            Write((short)value.Minute);\r\n       " +
                    "     Write((short)value.Second);\r\n            Write((short)value.Millisecond);\r\n" +
                    "        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying" +
                    " buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to w" +
                    "rite.</param>\r\n        public void Write(DateTime[] value)\r\n        {\r\n         " +
                    "   Write(value.Length);\r\n            foreach (var element in value)\r\n           " +
                    " Write(element);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a value" +
                    " to the underlying buffer.\r\n        /// </summary>\r\n        /// <param name=\"val" +
                    "ue\">The value to write.</param>\r\n        [Obsolete(\"DynamicType is obsolete. Con" +
                    "sider using JSON or XML serialized objects instead.\", false)]\r\n        public vo" +
                    "id Write(object value)\r\n        {\r\n            if (value is byte)\r\n            {" +
                    "\r\n                Write(true);\r\n                Write(@\"Byte\");\r\n               " +
                    " Write((byte)value);\r\n            }\r\n            else if (value is ushort)\r\n    " +
                    "        {\r\n                Write(true);\r\n                Write(@\"UInt16\");\r\n    " +
                    "            Write((ushort)value);\r\n            }\r\n            else if (value is " +
                    "short)\r\n            {\r\n                Write(true);\r\n                Write(@\"Int" +
                    "16\");\r\n                Write((short)value);\r\n            }\r\n            else if " +
                    "(value is uint)\r\n            {\r\n                Write(true);\r\n                Wr" +
                    "ite(@\"UInt32\");\r\n                Write((uint)value);\r\n            }\r\n           " +
                    " else if (value is int)\r\n            {\r\n                Write(true);\r\n          " +
                    "      Write(@\"Int32\");\r\n                Write((int)value);\r\n            }\r\n     " +
                    "       else if (value is ulong)\r\n            {\r\n                Write(true);\r\n  " +
                    "              Write(@\"UInt64\");\r\n                Write((ulong)value);\r\n         " +
                    "   }\r\n            else if (value is long)\r\n            {\r\n                Write(" +
                    "true);\r\n                Write(@\"Int64\");\r\n                Write((long)value);\r\n " +
                    "           }\r\n            else if (value is float)\r\n            {\r\n             " +
                    "   Write(true);\r\n                Write(@\"Single\");\r\n                Write((float" +
                    ")value);\r\n            }\r\n            else if (value is double)\r\n            {\r\n " +
                    "               Write(true);\r\n                Write(@\"Double\");\r\n                " +
                    "Write((double)value);\r\n            }\r\n            else if (value is bool)\r\n     " +
                    "       {\r\n                Write(true);\r\n                Write(@\"Boolean\");\r\n    " +
                    "            Write((bool)value);\r\n            }\r\n            else if (value is st" +
                    "ring)\r\n            {\r\n                Write(true);\r\n                Write(@\"Stri" +
                    "ng\");\r\n                Write((string)value);\r\n            }\r\n            else if" +
                    " (value is DateTime)\r\n            {\r\n                Write(true);\r\n             " +
                    "   Write(@\"DateTime\");\r\n                Write((DateTime)value);\r\n            }\r\n" +
                    "            else\r\n            Write(false);\r\n        }\r\n\r\n        /// <summary>\r" +
                    "\n        /// Writes a value to the underlying buffer.\r\n        /// </summary>\r\n " +
                    "       /// <param name=\"value\">The value to write.</param>\r\n        [Obsolete(\"D" +
                    "ynamicType is obsolete. Consider using JSON or XML serialized objects instead.\"," +
                    " false)]\r\n        public void Write(object[] value)\r\n        {\r\n            Writ" +
                    "e(value.Length);\r\n            foreach (var element in value)\r\n            Write(" +
                    "(object)element);\r\n        }\r\n\r\n");
            
            #line 435 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
 foreach(var customType in Model.CustomTypes) { 
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Writes a value to the underlying buffer.\r\n    " +
                    "    /// </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r" +
                    "\n        protected void Write(");
            
            #line 440 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n        {\r\n            ");
            
            #line 442 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
 foreach(var member in customType.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t    Write(value.");
            
            #line 443 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n            ");
            
            #line 444 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        /// <summary>\r\n        /// Writes a value to the underlying " +
                    "buffer.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to wr" +
                    "ite.</param>\r\n        protected void Write(");
            
            #line 451 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("[] value)\r\n        {\r\n            Write(value.Length);\r\n            foreach (var " +
                    "element in value)\r\n                Write(element);\r\n        }\r\n");
            
            #line 457 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\PacketWriter.t4"
 } 
            
            #line default
            #line hidden
            this.Write("    }");
            this.Write(" ");
            
            #line 19 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 20 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 if(Target == null || Target == "TcpChannelBase") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("  /// <summary>\r\n    /// Represents a connection result.\r\n    /// </summary>\r\n   " +
                    " public enum ConnectionResult\r\n    {\r\n        /// <summary>\r\n        /// Represe" +
                    "nts that the connection was established.\r\n        /// </summary>\r\n        Connec" +
                    "ted,\r\n\r\n        /// <summary>\r\n        /// Repreesnts an error.\r\n        /// </s" +
                    "ummary>\r\n        Error\r\n    }\r\n\r\n    /// <summary>\r\n    /// Represents a connect" +
                    "ion error.\r\n    /// </summary>\r\n    public enum ConnectionError\r\n    {\r\n        " +
                    "/// <summary>\r\n        /// Unknown connection error has occured.\r\n        /// </" +
                    "summary>\r\n        Unknown,\r\n\r\n        /// <summary>\r\n        /// Represents a ma" +
                    "nual disconnection error.\r\n        /// </summary>\r\n        Manual,\r\n\r\n        //" +
                    "/ <summary>\r\n        /// Represents a connection error during a connect.\r\n      " +
                    "  /// </summary>\r\n        Connection,\r\n\r\n        /// <summary>\r\n        /// Repr" +
                    "esents a connection error during the receive.\r\n        /// </summary>\r\n        R" +
                    "eceive,\r\n\r\n        /// <summary>\r\n        /// Represents a connection error duri" +
                    "ng the send.\r\n        /// </summary>\r\n        Send\r\n    }\r\n\r\n    /// <summary>\r\n" +
                    "    /// Represents a TCP Channel.\r\n    /// </summary>\r\n    /// <typeparam name=\"" +
                    "T\"></typeparam>\r\n    public abstract class TcpChannelBase<T> where T : TcpChanne" +
                    "lBase<T>\r\n    {\r\n        private Socket TcpSocket;\r\n        private Stream Inner" +
                    "Stream;\r\n        private object Lock = new object();\r\n        private byte[] Rec" +
                    "eiveBuffer;\r\n        private int ReceiveBufferPosition;\r\n        private int Rec" +
                    "eiveBufferSize;\r\n\r\n        /// <summary>\r\n        /// An event that occurs when " +
                    "the channel is connected to the remote endpoint.\r\n        /// </summary>\r\n      " +
                    "  public event Action<T> Connected;\r\n\r\n        /// <summary>\r\n        /// An eve" +
                    "nt that occurs when the channel is disconnected to the remote endpoint.\r\n       " +
                    " /// </summary>\r\n        public event Action<T,ConnectionError> Disconnected;\r\n\r" +
                    "\n        /// <summary>\r\n        /// Constructs a new instance of a channel.\r\n   " +
                    "     /// </summary>\r\n        /// <param name=\"bufferCapacity\">The buffer capacit" +
                    "y to allocate.</param>\r\n        /// <param name=\"tls\">Whether SSL/TLS should be " +
                    "used or not.</param>\r\n        public TcpChannelBase(int bufferCapacity, bool tls" +
                    ")\r\n        {\r\n            this.BufferCapacity = bufferCapacity;\r\n            thi" +
                    "s.TlsSecure = tls;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the max" +
                    " capacity buffer size.\r\n        /// </summary>\r\n        public int BufferCapacit" +
                    "y \r\n        {\r\n            get;\r\n            protected set; \r\n        }\r\n\r\n     " +
                    "   /// <summary>\r\n        /// Whether this channel is secured with TLS/SSL.\r\n   " +
                    "     /// </summary>\r\n        public bool TlsSecure\r\n        {\r\n            get;\r" +
                    "\n            protected set;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Thi" +
                    "s packet writer is used to serialize packets. We need to maintain\r\n        /// t" +
                    "he state for each thread, hence this is thread static.\r\n        /// </summary>\r\n" +
                    "        [ThreadStatic]\r\n        private static PacketWriter PacketWriter;\r\n\r\n   " +
                    "     /// <summary>\r\n        /// Gets a packet writer for the current thread.\r\n  " +
                    "      /// </summary>\r\n        public PacketWriter Writer\r\n        {\r\n           " +
                    " get \r\n            {\r\n                if (PacketWriter == null)\r\n               " +
                    "     PacketWriter = new PacketWriter(this.BufferCapacity);\r\n                retu" +
                    "rn PacketWriter;\r\n            }\r\n        }\r\n\r\n\r\n        /// <summary>\r\n        /" +
                    "// Gets whether the current channel is connected or not.\r\n        /// </summary>" +
                    "\r\n        public bool IsConnected \r\n        {\r\n\r\n            get \r\n            {" +
                    "\r\n                return (TcpSocket != null && TcpSocket.Connected);\r\n          " +
                    "  }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Connects to the specified h" +
                    "ostname and port and start listening to it.\r\n        /// </summary>\r\n        ///" +
                    " <param name=\"host\">The host to connect to.</param>\r\n        /// <param name=\"po" +
                    "rt\">The port to connect to.</param>\r\n        /// <returns>The result of the conn" +
                    "ection.</returns>\r\n        public async Task<ConnectionResult> Connect(string ho" +
                    "st, int port)\r\n        {\r\n            try\r\n            {\r\n                TcpSoc" +
                    "ket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp" +
                    ");\r\n\r\n                await Task.Factory.FromAsync(\r\n                TcpSocket.B" +
                    "eginConnect, \r\n                TcpSocket.EndConnect,\r\n                host, port" +
                    ", null);\r\n\r\n                if (TlsSecure)\r\n                {\r\n                 " +
                    "   var sslStream = new SslStream(new NetworkStream(TcpSocket),\r\n                " +
                    "    false,\r\n                    (sender, certificate, chain, sslPolicyErrors) =>" +
                    " \r\n                    {\r\n                        return true; \r\n               " +
                    "     }\r\n                    //Accept self signed\r\n                    );\r\n      " +
                    "              sslStream.AuthenticateAsClient(\"Spike Client\");\r\n                 " +
                    "   InnerStream = sslStream;\r\n                }\r\n                else\r\n          " +
                    "      InnerStream = new NetworkStream(TcpSocket);\r\n\r\n\r\n                ReceiveBu" +
                    "ffer = new byte[BufferCapacity];\r\n                ReceiveBufferPosition = 0;\r\n  " +
                    "              ReceiveBufferSize = 0;\r\n\r\n                if (Connected != null)\r\n" +
                    "                Connected((T)this);\r\n\r\n                ReceiveLoop();\r\n\r\n       " +
                    "         return ConnectionResult.Connected;\r\n            }\r\n            catch (E" +
                    "xception)\r\n            {\r\n                return ConnectionResult.Error;\r\n      " +
                    "      }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Disconnects the channel" +
                    " from the remote endpoint.\r\n        /// </summary>\r\n        public void Disconne" +
                    "ct()\r\n        {\r\n            Disconnect(ConnectionError.Manual);\r\n        }\r\n\r\n " +
                    "       #region Receive Members\r\n        protected abstract void OnReceive(uint k" +
                    "ey);\r\n\r\n        private async void ReceiveLoop()\r\n        {\r\n            while (" +
                    "true)\r\n            {\r\n                //Read Size\r\n                ReceiveBuffer" +
                    "Position = 0;\r\n                ReceiveBufferSize = await Task.Run(() => Fill(siz" +
                    "eof(int)));\r\n                if (ReceiveBufferSize != sizeof(int))\r\n            " +
                    "    {\r\n                    Disconnect(ConnectionError.Receive);\r\n               " +
                    "     return;\r\n                }\r\n\r\n                //read packet data\r\n         " +
                    "       ReceiveBufferPosition = 0;\r\n                ReceiveBufferSize = PacketRea" +
                    "dInt32() + sizeof(int);\r\n\r\n                do\r\n                {\r\n              " +
                    "      var readed = await Task.Run(() => Fill(ReceiveBufferSize - ReceiveBufferPo" +
                    "sition));\r\n                    if (readed == 0)\r\n                    {\r\n        " +
                    "                Disconnect(ConnectionError.Receive);\r\n                        re" +
                    "turn;\r\n                    }\r\n                    ReceiveBufferPosition += reade" +
                    "d;\r\n                } while (ReceiveBufferPosition < ReceiveBufferSize);\r\n\r\n    " +
                    "            ReceiveBufferPosition = sizeof(int);\r\n\r\n                OnReceive(Pa" +
                    "cketReadUInt32());\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n        #r" +
                    "egion Private/Protected Members\r\n\r\n        private int Fill(int size)\r\n        {" +
                    "\r\n\r\n            try\r\n            {\r\n                return InnerStream.Read(Rece" +
                    "iveBuffer, ReceiveBufferPosition, size);\r\n                //return socket.Receiv" +
                    "e(ReceiveBuffer,ReceiveBufferPosition,size,SocketFlags.None);\r\n            }\r\n  " +
                    "          catch (Exception)\r\n            {\r\n                return 0;\r\n         " +
                    "   }\r\n        }\r\n\r\n\r\n        private void Disconnect(ConnectionError error)\r\n   " +
                    "     {\r\n            var mustRaise = false;\r\n            lock (Lock)\r\n           " +
                    " {\r\n                if (TcpSocket != null)\r\n                {\r\n                 " +
                    "   TcpSocket.Dispose();\r\n                    mustRaise = true;\r\n                " +
                    "    TcpSocket = null;\r\n                }\r\n            }\r\n\r\n            if (mustR" +
                    "aise)\r\n            Disconnected((T)this, error);            \r\n        }\r\n\r\n     " +
                    "   protected void BeginReadPacket(bool compressed)\r\n        {\r\n            if (c" +
                    "ompressed)\r\n            {\r\n                var compressedBuffer = new byte[Recei" +
                    "veBufferSize - 8];\r\n                var uncompressedBuffer = new byte[BufferCapa" +
                    "city];\r\n                Buffer.BlockCopy(ReceiveBuffer, 8, compressedBuffer, 0, " +
                    "compressedBuffer.Length);\r\n                var cipher = new CLZF();\r\n           " +
                    "     var uncompressedSize = cipher.lzf_decompress(compressedBuffer, compressedBu" +
                    "ffer.Length, uncompressedBuffer, uncompressedBuffer.Length);\r\n                Bu" +
                    "ffer.BlockCopy(uncompressedBuffer, 0, ReceiveBuffer, 8, uncompressedSize);\r\n    " +
                    "            ReceiveBufferSize = uncompressedSize + 8;\r\n            }\r\n        }\r" +
                    "\n\r\n\r\n        protected async Task SendPacket(PacketWriter writer, bool compresse" +
                    "d)\r\n        {\r\n            try\r\n            {\r\n                // Get the final " +
                    "buffer we should send\r\n                var buffer = writer.Flush(compressed);\r\n " +
                    "               var success = await Task.Run<bool>(() => \r\n                {\r\n   " +
                    "                 try \r\n                    {\r\n                        InnerStrea" +
                    "m.Write(buffer, 0, buffer.Length);\r\n                        return true;\r\n      " +
                    "              }\r\n                    catch(Exception)\r\n                    {\r\n  " +
                    "                      return false;\r\n                    }\r\n                });\r" +
                    "\n\r\n                if(!success)\r\n                {\r\n                    Disconne" +
                    "ct(ConnectionError.Send);\r\n                    return;\r\n                }\r\n     " +
                    "       }\r\n            catch (Exception)\r\n            {\r\n                Disconne" +
                    "ct(ConnectionError.Unknown);\r\n            }\r\n        }\r\n\r\n        #endregion\r\n\r\n" +
                    "        #region Packet Read\r\n\r\n        protected byte PacketReadByte()\r\n        " +
                    "{\r\n            return ReceiveBuffer[ReceiveBufferPosition++];\r\n        }\r\n      " +
                    "  protected byte[] PacketReadListOfByte()\r\n        {\r\n            var value = ne" +
                    "w byte[PacketReadInt32()];\r\n            Buffer.BlockCopy(ReceiveBuffer, ReceiveB" +
                    "ufferPosition, value, 0, value.Length);\r\n            ReceiveBufferPosition += va" +
                    "lue.Length;\r\n            return value;\r\n        }\r\n\r\n        // UInt16\r\n        " +
                    "protected ushort PacketReadUInt16()\r\n        {\r\n            return (ushort)((Rec" +
                    "eiveBuffer[ReceiveBufferPosition++] << 8)\r\n            | ReceiveBuffer[ReceiveBu" +
                    "fferPosition++]);\r\n        }\r\n\r\n        protected ushort[] PacketReadListOfUInt1" +
                    "6()\r\n        {\r\n            var value = new ushort[PacketReadInt32()];\r\n        " +
                    "    for (int index = 0; index < value.Length; index++)\r\n            value[index]" +
                    " = PacketReadUInt16();\r\n            return value;\r\n        }\r\n\r\n        // Int16" +
                    "\r\n        protected short PacketReadInt16()\r\n        {\r\n            return (shor" +
                    "t)((ReceiveBuffer[ReceiveBufferPosition++] << 8)\r\n            | ReceiveBuffer[Re" +
                    "ceiveBufferPosition++]);\r\n        }\r\n\r\n        protected short[] PacketReadListO" +
                    "fInt16()\r\n        {\r\n            var value = new short[PacketReadInt32()];\r\n    " +
                    "        for (int index = 0; index < value.Length; index++)\r\n            value[in" +
                    "dex] = PacketReadInt16();\r\n            return value;\r\n        }\r\n \r\n        // U" +
                    "Int32\r\n        protected uint PacketReadUInt32()\r\n        {\r\n            return " +
                    "(uint)(ReceiveBuffer[ReceiveBufferPosition++] << 24\r\n            | (ReceiveBuffe" +
                    "r[ReceiveBufferPosition++] << 16)\r\n            | (ReceiveBuffer[ReceiveBufferPos" +
                    "ition++] << 8)\r\n            | (ReceiveBuffer[ReceiveBufferPosition++]));\r\n      " +
                    "  }\r\n\r\n        protected uint[] PacketReadListOfUInt32()\r\n        {\r\n           " +
                    " var value = new uint[PacketReadInt32()];\r\n            for (int index = 0; index" +
                    " < value.Length; index++)\r\n            value[index] = PacketReadUInt32();\r\n     " +
                    "       return value;\r\n        }\r\n \r\n        // Int32\r\n        protected int Pack" +
                    "etReadInt32()\r\n        {\r\n            return ReceiveBuffer[ReceiveBufferPosition" +
                    "++] << 24\r\n            | (ReceiveBuffer[ReceiveBufferPosition++] << 16)\r\n       " +
                    "     | (ReceiveBuffer[ReceiveBufferPosition++] << 8)\r\n            | (ReceiveBuff" +
                    "er[ReceiveBufferPosition++]);\r\n        }\r\n\r\n        protected int[] PacketReadLi" +
                    "stOfInt32()\r\n        {\r\n            var value = new int[PacketReadInt32()];\r\n   " +
                    "         for (int index = 0; index < value.Length; index++)\r\n            value[i" +
                    "ndex] = PacketReadInt32();\r\n            return value;\r\n        }\r\n\r\n        // U" +
                    "Int64\r\n        protected ulong PacketReadUInt64()\r\n        {\r\n            ulong " +
                    "value = ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value " +
                    "|= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= Re" +
                    "ceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= Receive" +
                    "Buffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffe" +
                    "r[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[Rec" +
                    "eiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[ReceiveB" +
                    "ufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[ReceiveBuffer" +
                    "Position++];\r\n            return value;\r\n        }\r\n\r\n        protected ulong[] " +
                    "PacketReadListOfUInt64()\r\n        {\r\n            var value = new ulong[PacketRea" +
                    "dInt32()];\r\n            for (int index = 0; index < value.Length; index++)\r\n    " +
                    "        value[index] = PacketReadUInt64();\r\n            return value;\r\n        }" +
                    "\r\n\r\n        // Int64\r\n        protected long PacketReadInt64()\r\n        {\r\n     " +
                    "       long value = ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n      " +
                    "      value |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n           " +
                    " value |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            valu" +
                    "e |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= " +
                    "ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= Recei" +
                    "veBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuf" +
                    "fer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[R" +
                    "eceiveBufferPosition++];\r\n            return value;\r\n        }\r\n\r\n        protec" +
                    "ted long[] PacketReadListOfInt64()\r\n        {\r\n            var value = new long[" +
                    "PacketReadInt32()];\r\n            for (int index = 0; index < value.Length; index" +
                    "++)\r\n            value[index] = PacketReadInt64();\r\n            return value;\r\n " +
                    "       }\r\n\r\n        // Boolean\r\n        protected bool PacketReadBoolean()\r\n    " +
                    "    {\r\n            return ReceiveBuffer[ReceiveBufferPosition++] != 0;\r\n        " +
                    "}\r\n\r\n        public bool[] PacketReadListOfBoolean()\r\n        {\r\n            var" +
                    " value = new bool[PacketReadInt32()];\r\n            for (int index = 0; index < v" +
                    "alue.Length; index++)\r\n            value[index] = PacketReadBoolean();\r\n        " +
                    "    return value;\r\n        }\r\n\r\n        protected float PacketReadSingle()\r\n    " +
                    "    {\r\n            var bytes = new byte[sizeof(float)];\r\n            for (var in" +
                    "dex = bytes.Length - 1; index >= 0; --index)\r\n            bytes[index] = PacketR" +
                    "eadByte();\r\n            return BitConverter.ToSingle(bytes, 0); \r\n        }\r\n\r\n " +
                    "       protected float[] PacketReadListOfSingle()\r\n        {\r\n            var va" +
                    "lue = new float[PacketReadInt32()];\r\n            for (int index = 0; index < val" +
                    "ue.Length; index++)\r\n            value[index] = PacketReadSingle();\r\n           " +
                    " return value;\r\n        }\r\n\r\n        protected double PacketReadDouble()\r\n      " +
                    "  {\r\n            var bytes = new byte[sizeof(double)];\r\n            for (var ind" +
                    "ex = bytes.Length - 1; index >= 0; --index)\r\n            bytes[index] = PacketRe" +
                    "adByte();\r\n            return BitConverter.ToDouble(bytes, 0);\r\n        }\r\n\r\n   " +
                    "     protected double[] PacketReadListOfDouble()\r\n        {\r\n            var val" +
                    "ue = new double[PacketReadInt32()];\r\n            for (int index = 0; index < val" +
                    "ue.Length; index++)\r\n            value[index] = PacketReadDouble();\r\n           " +
                    " return value;\r\n        }\r\n\r\n        // String\r\n        protected string PacketR" +
                    "eadString()\r\n        {\r\n            var bytes = PacketReadListOfByte();\r\n       " +
                    "     return Encoding.UTF8.GetString(bytes, 0, bytes.Length);\r\n        }\r\n\r\n     " +
                    "   protected string[] PacketReadListOfString()\r\n        {\r\n            var value" +
                    " = new string[PacketReadInt32()];\r\n            for (int index = 0; index < value" +
                    ".Length; index++)\r\n            value[index] = PacketReadString();\r\n            r" +
                    "eturn value;\r\n        }\r\n        // DateTime\r\n        protected DateTime PacketR" +
                    "eadDateTime()\r\n        {\r\n            var year = PacketReadInt16();\r\n           " +
                    " var month = PacketReadInt16();\r\n            var day = PacketReadInt16();\r\n     " +
                    "       var hour = PacketReadInt16();\r\n            var minute = PacketReadInt16()" +
                    ";\r\n            var second = PacketReadInt16();\r\n            var millisecond = Pa" +
                    "cketReadInt16();\r\n\r\n            return new DateTime(year, month, day, hour, minu" +
                    "te, second, millisecond);\r\n        }\r\n\r\n        protected DateTime[] PacketReadL" +
                    "istOfDateTime()\r\n        {\r\n            var value = new DateTime[PacketReadInt32" +
                    "()];\r\n            for (int index = 0; index < value.Length; index++)\r\n          " +
                    "  value[index] = PacketReadDateTime();\r\n            return value;\r\n        }\r\n\r\n" +
                    "        [Obsolete(\"DynamicType is obsolete. Consider using JSON or XML serialize" +
                    "d objects instead.\", false)]\r\n        protected object PacketReadDynamicType()\r\n" +
                    "        {\r\n            if (PacketReadBoolean())\r\n            {\r\n                " +
                    "switch (PacketReadString())\r\n                {\r\n                    case \"Byte\":" +
                    "\r\n                    return PacketReadByte();\r\n                    case \"UInt16" +
                    "\":\r\n                    return PacketReadUInt16();\r\n                    case \"In" +
                    "t16\":\r\n                    return PacketReadInt16();\r\n                    case \"" +
                    "UInt32\":\r\n                    return PacketReadUInt32();\r\n                    ca" +
                    "se \"Int32\":\r\n                    return PacketReadInt32();\r\n                    " +
                    "case \"UInt64\":\r\n                    return PacketReadUInt64();\r\n                " +
                    "    case \"Int64\":\r\n                    return PacketReadInt64();\r\n              " +
                    "      case \"Single\":\r\n                    return PacketReadSingle();\r\n          " +
                    "          case \"Double\":\r\n                    return PacketReadDouble();\r\n      " +
                    "              case \"Boolean\":\r\n                    return PacketReadBoolean();\r\n" +
                    "                    case \"String\":\r\n                    return PacketReadString(" +
                    ");\r\n                    case \"DateTime\":\r\n                    return PacketReadD" +
                    "ateTime();\r\n                }\r\n            }\r\n            return null;\r\n        " +
                    "}\r\n\r\n        [Obsolete(\"DynamicType is obsolete. Consider using JSON or XML seri" +
                    "alized objects instead.\", false)]\r\n        protected object[] PacketReadListOfDy" +
                    "namicType()\r\n        {\r\n            var value = new object[PacketReadInt32()];\r\n" +
                    "            for (int index = 0; index < value.Length; index++)\r\n            valu" +
                    "e[index] = PacketReadDynamicType();\r\n            return value;\r\n        }\r\n     " +
                    "   #endregion\r\n    }");
            this.Write(" ");
            
            #line 20 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 21 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 if(Target == null || Target == "TcpChannel") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("\tpublic class TcpChannel : TcpChannelBase<TcpChannel>\r\n\t{\r\n\t\tpublic TcpChannel(in" +
                    "t bufferSize = 8096, bool useSSL=false) : base(bufferSize, useSSL)\r\n\t\t{\r\n\t\t}\r\n\r\n" +
                    "\t\t//Events\r\n");
            
            #line 8 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
		foreach(var receive in Model.Receives)
		{ 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tpublic event Action<TcpChannel, ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Name));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Name));
            
            #line default
            #line hidden
            this.Write("; \r\n");
            
            #line 11 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
		} 
            
            #line default
            #line hidden
            this.Write("\t\t    \r\n\t\t//Sends        \r\n");
            
            #line 14 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
		foreach(var send in Model.Sends)
		{ 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tpublic async Task ");
            
            #line 16 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(send.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 16 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
	
			var first = true;
			foreach(var member in send.Members){
				if(!first)
					Write(", ");

				Write(CSharp5Builder.GetNativeType(member));
				Write(" ");
				Write(member.Name);
				first = false;
			}
		
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\tthis.Writer.Begin(0x");
            
            #line 29 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(send.Id.ToString("X")));
            
            #line default
            #line hidden
            this.Write("u);\r\n");
            
            #line 30 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
			foreach(var member in send.Members)
			{ 
            
            #line default
            #line hidden
            this.Write("\t\t\tthis.Writer.Write(");
            
            #line 32 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 33 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
			} 
            
            #line default
            #line hidden
            this.Write("\t\t\tawait SendPacket(this.Writer, ");
            
            #line 34 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(send.Compressed ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\t\t \r\n");
            
            #line 36 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
		} 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t//Dispatcher\r\n\t\tprotected override void OnReceive(uint key)\r\n\t\t{\r\n\t\t\tswitch (" +
                    "key)\r\n\t\t\t{\r\n");
            
            #line 43 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
				foreach(var receive in Model.Receives)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tcase 0x");
            
            #line 45 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Id.ToString("X")));
            
            #line default
            #line hidden
            this.Write("u:\r\n\t\t\t\t{\r\n\t\t\t\t\tvar packet = new ");
            
            #line 47 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t\t\t\tBeginReadPacket(");
            
            #line 48 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Compressed ? "true" : "false"));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t\r\n");
            
            #line 50 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
					foreach(var member in receive.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tpacket.");
            
            #line 51 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" = PacketRead");
            
            #line 51 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "ListOf" : string.Empty));
            
            #line default
            #line hidden
            
            #line 51 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 52 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
					} 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t//Now Call event\r\n\t\t\t\t\tif (");
            
            #line 55 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Name));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t\t\t\t\t\t");
            
            #line 56 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(receive.Name));
            
            #line default
            #line hidden
            this.Write("(this, packet);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n");
            
            #line 60 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
				} 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tDebug.WriteLine(\"Unknow packet : {0:X}\", key);\r\n\t\t\t\t\treturn;" +
                    "\r\n\t\t\t}\r\n\t\t}\r\n\r\n");
            
            #line 68 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
 foreach(var customType in Model.CustomTypes) { 
            
            #line default
            #line hidden
            this.Write("\t\tprotected ");
            
            #line 69 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write(" PacketRead");
            
            #line 69 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            var value = new ");
            
            #line 71 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t\t");
            
            #line 72 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
 foreach(var member in customType.Members) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tvalue.");
            
            #line 73 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" = PacketRead");
            
            #line 73 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "ListOf" : string.Empty));
            
            #line default
            #line hidden
            
            #line 73 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t\t");
            
            #line 74 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn value;\r\n        }\r\n\r\n        protected ");
            
            #line 78 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("[] PacketReadListOf");
            
            #line 78 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            var value = new ");
            
            #line 80 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("[PacketReadInt32()];\r\n            for (int index = 0; index < value.Length; index" +
                    "++)\r\n                value[index] = PacketRead");
            
            #line 82 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(customType.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n            return value;\r\n        }\r\n");
            
            #line 85 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\TcpChannel.t4"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t}\r\n");
            this.Write(" ");
            
            #line 21 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 } 
            
            #line default
            #line hidden
            
            #line 22 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
	if(Target == null)
	{ 
		foreach( var operation in Model.Receives )
		{
			TargetOperation = operation; 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t");
            this.Write("    /// <summary>\r\n    /// Represents a serializable packet of type ");
            
            #line 2 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    /// </summary>\r\n\tpublic sealed class ");
            
            #line 4 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 6 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
		foreach(var member in TargetOperation.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t/// <summary>\r\n\t\t/// Gets or sets the member \'");
            
            #line 8 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the packet.\r\n\t\t/// </summary>\r\n\t\tpublic ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharp5Builder.GetNativeType(member)));
            
            #line default
            #line hidden
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 11 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
		} 
            
            #line default
            #line hidden
            this.Write("    }");
            this.Write("\r\n");
            
            #line 28 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
		} 
	} else if( Target == "Packet" )
	{ 
            
            #line default
            #line hidden
            this.Write(" \r\n\t");
            this.Write("    /// <summary>\r\n    /// Represents a serializable packet of type ");
            
            #line 2 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    /// </summary>\r\n\tpublic sealed class ");
            
            #line 4 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 6 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
		foreach(var member in TargetOperation.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t/// <summary>\r\n\t\t/// Gets or sets the member \'");
            
            #line 8 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the packet.\r\n\t\t/// </summary>\r\n\t\tpublic ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharp5Builder.GetNativeType(member)));
            
            #line default
            #line hidden
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 11 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\Packet.t4"
		} 
            
            #line default
            #line hidden
            this.Write("    }");
            this.Write("\r\n");
            
            #line 32 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 34 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
	if(Target == null)
	{ 
		foreach( var customType in Model.CustomTypes )
		{
			TargetType = customType; 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t");
            this.Write("    /// <summary>\r\n    /// Represents a serializable complex type ");
            
            #line 2 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    /// </summary>\r\n\tpublic partial struct ");
            
            #line 4 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 6 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
		foreach(var member in TargetType.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t/// <summary>\r\n\t\t/// Gets or sets the property \'");
            
            #line 8 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the complex type.\r\n\t\t/// </summary>\r\n\t\tpublic ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharp5Builder.GetNativeType(member)));
            
            #line default
            #line hidden
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 11 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
		} 
            
            #line default
            #line hidden
            this.Write("    }");
            this.Write("\r\n");
            
            #line 40 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
		} 
	} else if( Target == "ComplexType" )
	{ 
            
            #line default
            #line hidden
            this.Write(" \r\n\t");
            this.Write("    /// <summary>\r\n    /// Represents a serializable complex type ");
            
            #line 2 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    /// </summary>\r\n\tpublic partial struct ");
            
            #line 4 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 6 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
		foreach(var member in TargetType.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t/// <summary>\r\n\t\t/// Gets or sets the property \'");
            
            #line 8 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the complex type.\r\n\t\t/// </summary>\r\n\t\tpublic ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharp5Builder.GetNativeType(member)));
            
            #line default
            #line hidden
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 10 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 11 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\ComplexType.t4"
		} 
            
            #line default
            #line hidden
            this.Write("    }");
            this.Write("\r\n");
            
            #line 44 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 48 "d:\Workspace\Spike.Build\Spike.Build.CSharp5\CSharp5Template.tt"
 internal void Clear(){
	GenerationEnvironment.Clear();
} 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CSharp5TemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
