// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Spike.Build.CSharp5
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Fabian\Desktop\Projects\GitHub\spike-build\Spike.Build.CSharp5\TcpChannelBaseTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class TcpChannelBaseTemplate : TcpChannelBaseTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using LZF.NET;\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusi" +
                    "ng System.Threading.Tasks;\r\nusing System.Net.Sockets;\r\n\r\nnamespace Spike.Network" +
                    "\r\n{\r\n    public abstract class TcpChannelBase<T> where T : TcpChannelBase<T>\r\n  " +
                    "  {\r\n        public event Action<T> Connected;\r\n        public event Action<T> D" +
                    "isconnected;\r\n        \r\n        private Socket socket;\r\n        private object m" +
                    "utext = new object();\r\n        private bool disposed = false;\r\n\r\n        private" +
                    " byte[] SendBuffer;\r\n        private int SendBufferPosition;\r\n\r\n        private " +
                    "byte[] ReceiveBuffer;\r\n        private int ReceiveBufferPosition;\r\n        priva" +
                    "te int ReceiveBufferSize;\r\n\r\n        public async void Connect(string host, int " +
                    "port)\r\n        {\r\n            try\r\n            {\r\n                socket = new S" +
                    "ocket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n\r\n\t\t\t\ta" +
                    "wait Task.Run(() => socket.Connect(host, port));\r\n\r\n\t\t\t\tSendBuffer = new byte[40" +
                    "96];\r\n\t\t\t\tSendBufferPosition = 0;\r\n\r\n\t\t\t\tReceiveBuffer = new byte[4096];\r\n\t\t\t\tRe" +
                    "ceiveBufferPosition = 0;\r\n\t\t\t\tReceiveBufferSize = 0;\r\n\r\n\t\t\t\tif (Connected != nul" +
                    "l)\r\n\t\t\t\t\tConnected((T)this);\r\n\r\n            \r\n                while (true)\r\n    " +
                    "            {\r\n                    ReceiveBufferSize = await Task.Run(() => { re" +
                    "turn socket.Receive(ReceiveBuffer); });\r\n\r\n                    ReceiveBufferPosi" +
                    "tion = 0;\r\n\r\n                    if (ReceiveBufferSize != (PacketReadInt32() + 4" +
                    "))\r\n                    {\r\n                        Debug.WriteLine(\"No fragmenta" +
                    "tion\");\r\n                        Disconnect();\r\n                        return;\r" +
                    "\n                    }\r\n                    OnReceive(PacketReadUInt32());\r\n    " +
                    "            }\r\n            }\r\n            catch (Exception)\r\n            {\r\n    " +
                    "            Debug.WriteLine(\"Exception\");\r\n                Disconnect();\r\n      " +
                    "      }\r\n        }\r\n\r\n        public void Disconnect()\r\n        {\r\n            v" +
                    "ar mustRaise = false;\r\n            lock (socket)\r\n            {\r\n               " +
                    " if (!disposed)\r\n                {\r\n                    mustRaise = true;\r\n     " +
                    "               disposed = true;\r\n                    socket.Dispose();          " +
                    "          \r\n                }\r\n            }\r\n\r\n            if (mustRaise && Dis" +
                    "connected != null)\r\n                Disconnected((T)this);\r\n        }\r\n\r\n       " +
                    " protected void BeginReadPacket(bool compressed)\r\n        {\r\n            if (com" +
                    "pressed)\r\n            {\r\n                var compressedBuffer = new byte[Receive" +
                    "BufferSize - 8];\r\n                var uncompressedBuffer = new byte[4096];\r\n    " +
                    "            Buffer.BlockCopy(ReceiveBuffer, 8, compressedBuffer, 0, compressedBu" +
                    "ffer.Length);\r\n                var cipher = new CLZF();\r\n                var unc" +
                    "ompressedSize = cipher.lzf_decompress(compressedBuffer, compressedBuffer.Length," +
                    " uncompressedBuffer, uncompressedBuffer.Length);\r\n                Buffer.BlockCo" +
                    "py(uncompressedBuffer, 0, ReceiveBuffer, 8, uncompressedSize);\r\n                " +
                    "ReceiveBufferSize = uncompressedSize + 8;\r\n            }\r\n        }\r\n\r\n        p" +
                    "rotected void BeginNewPacket(uint key)\r\n        {\r\n            SendBufferPositio" +
                    "n = 4;\r\n            PacketWrite(key);\r\n        }\r\n\r\n        private void SetSize" +
                    "()\r\n        {\r\n            var size = SendBufferPosition - 4;\r\n            SendB" +
                    "uffer[0] = ((byte)(size >> 24));\r\n            SendBuffer[1] = ((byte)(size >> 16" +
                    "));\r\n            SendBuffer[2] = ((byte)(size >> 8));\r\n            SendBuffer[3]" +
                    " = ((byte)size);\r\n        }\r\n\r\n        protected async Task SendPacket(bool comp" +
                    "ressed)\r\n        {\r\n            try\r\n            {\r\n                if (compress" +
                    "ed && SendBufferPosition > 8)\r\n                {\r\n                    //TODO mak" +
                    "e this better\r\n                    var cipher = new CLZF();\r\n                   " +
                    " var uncompressedBytes = new byte[SendBufferPosition - 8];\r\n                    " +
                    "Buffer.BlockCopy(SendBuffer, 8, uncompressedBytes, 0, uncompressedBytes.Length);" +
                    "\r\n                    var compressedBytes = new byte[4096];\r\n                   " +
                    " var size = cipher.lzf_compress(uncompressedBytes, uncompressedBytes.Length, com" +
                    "pressedBytes, compressedBytes.Length);\r\n                    Buffer.BlockCopy(com" +
                    "pressedBytes, 0, SendBuffer, 8, size);\r\n                    SendBufferPosition =" +
                    " size + 8;\r\n                }\r\n\r\n                SetSize();\r\n\r\n                a" +
                    "wait Task.Run(() => socket.Send(SendBuffer, SendBufferPosition, SocketFlags.None" +
                    "));\r\n            }\r\n            catch (Exception)\r\n            {\r\n              " +
                    "  Disconnect();\r\n            }\r\n        }\r\n\r\n        #region Spike Primary Type\r" +
                    "\n        // Byte\r\n        protected void PacketWrite(byte value)\r\n        {\r\n   " +
                    "         SendBuffer[SendBufferPosition++] = value;\r\n        }\r\n        protected" +
                    " byte PacketReadByte()\r\n        {\r\n            return ReceiveBuffer[ReceiveBuffe" +
                    "rPosition++];\r\n        }\r\n        protected byte[] PacketReadListOfByte()\r\n     " +
                    "   {\r\n            var value = new byte[PacketReadInt32()];\r\n            Buffer.B" +
                    "lockCopy(ReceiveBuffer, ReceiveBufferPosition, value, 0, value.Length);\r\n       " +
                    "     ReceiveBufferPosition += value.Length;\r\n            return value;\r\n        " +
                    "}\r\n        protected void PacketWrite(byte[] value)\r\n        {\r\n            Pack" +
                    "etWrite(value.Length);\r\n            Buffer.BlockCopy(value, 0, SendBuffer, SendB" +
                    "ufferPosition, value.Length);\r\n            SendBufferPosition += value.Length;\r\n" +
                    "        }\r\n\r\n        // SByte\r\n        //Don\'t existe in spike protocol\r\n\r\n     " +
                    "   // UInt16\r\n        protected ushort PacketReadUInt16()\r\n        {\r\n          " +
                    "  return (ushort)((ReceiveBuffer[ReceiveBufferPosition++] << 8)\r\n               " +
                    " | ReceiveBuffer[ReceiveBufferPosition++]);\r\n        }\r\n        protected void P" +
                    "acketWrite(ushort value)\r\n        {\r\n            PacketWrite((byte)(value >> 8))" +
                    ";\r\n            PacketWrite((byte)value);\r\n        }\r\n        protected ushort[] " +
                    "PacketReadListOfUInt16()\r\n        {\r\n            var value = new ushort[PacketRe" +
                    "adInt32()];\r\n            for (int index = 0; index < value.Length; index++)\r\n   " +
                    "             value[index] = PacketReadUInt16();\r\n            return value;\r\n    " +
                    "    }\r\n        protected void PacketWrite(ushort[] value)\r\n        {\r\n          " +
                    "  PacketWrite(value.Length);\r\n            var byteSize = Buffer.ByteLength(value" +
                    ");\r\n            Buffer.BlockCopy(SendBuffer, SendBufferPosition, value, 0, byteS" +
                    "ize);\r\n            SendBufferPosition += byteSize;\r\n        }\r\n\r\n        // Int1" +
                    "6\r\n        protected short PacketReadInt16()\r\n        {\r\n            return (sho" +
                    "rt)((ReceiveBuffer[ReceiveBufferPosition++] << 8)\r\n                | ReceiveBuff" +
                    "er[ReceiveBufferPosition++]);\r\n        }\r\n        protected void PacketWrite(sho" +
                    "rt value)\r\n        {\r\n            PacketWrite((byte)(value >> 8));\r\n            " +
                    "PacketWrite((byte)value);\r\n        }\r\n        protected short[] PacketReadListOf" +
                    "Int16()\r\n        {\r\n            var value = new short[PacketReadInt32()];\r\n     " +
                    "       for (int index = 0; index < value.Length; index++)\r\n                value" +
                    "[index] = PacketReadInt16();\r\n            return value;\r\n        }\r\n        prot" +
                    "ected void PacketWrite(short[] value)\r\n        {\r\n            PacketWrite(value." +
                    "Length);\r\n            foreach (var element in value)\r\n                PacketWrit" +
                    "e(element);\r\n        }\r\n\r\n        // UInt32\r\n        protected uint PacketReadUI" +
                    "nt32()\r\n        {\r\n            return (uint)(ReceiveBuffer[ReceiveBufferPosition" +
                    "++] << 24\r\n                 | (ReceiveBuffer[ReceiveBufferPosition++] << 16)\r\n  " +
                    "               | (ReceiveBuffer[ReceiveBufferPosition++] << 8)\r\n                " +
                    " | (ReceiveBuffer[ReceiveBufferPosition++]));\r\n        }\r\n        protected void" +
                    " PacketWrite(uint value)\r\n        {\r\n            PacketWrite((byte)(value >> 24)" +
                    ");\r\n            PacketWrite((byte)(value >> 16));\r\n            PacketWrite((byte" +
                    ")(value >> 8));\r\n            PacketWrite((byte)value);\r\n        }\r\n        prote" +
                    "cted uint[] PacketReadListOfUInt32()\r\n        {\r\n            var value = new uin" +
                    "t[PacketReadInt32()];\r\n            for (int index = 0; index < value.Length; ind" +
                    "ex++)\r\n                value[index] = PacketReadUInt32();\r\n            return va" +
                    "lue;\r\n        }\r\n        protected void PacketWrite(uint[] value)\r\n        {\r\n  " +
                    "          PacketWrite(value.Length);\r\n            foreach (var element in value)" +
                    "\r\n                PacketWrite(element);\r\n        }\r\n\r\n        // Int32\r\n        " +
                    "protected int PacketReadInt32()\r\n        {\r\n            return ReceiveBuffer[Rec" +
                    "eiveBufferPosition++] << 24\r\n                 | (ReceiveBuffer[ReceiveBufferPosi" +
                    "tion++] << 16)\r\n                 | (ReceiveBuffer[ReceiveBufferPosition++] << 8)" +
                    "\r\n                 | (ReceiveBuffer[ReceiveBufferPosition++]);\r\n        }\r\n\r\n   " +
                    "     protected void PacketWrite(int value)\r\n        {\r\n            PacketWrite((" +
                    "byte)(value >> 24));\r\n            PacketWrite((byte)(value >> 16));\r\n           " +
                    " PacketWrite((byte)(value >> 8));\r\n            PacketWrite((byte)value);\r\n      " +
                    "  }\r\n        protected int[] PacketReadListOfInt32()\r\n        {\r\n            var" +
                    " value = new int[PacketReadInt32()];\r\n            for (int index = 0; index < va" +
                    "lue.Length; index++)\r\n                value[index] = PacketReadInt32();\r\n       " +
                    "     return value;\r\n        }\r\n        protected void PacketWrite(int[] value)\r\n" +
                    "        {\r\n            PacketWrite(value.Length);\r\n            foreach (var elem" +
                    "ent in value)\r\n                PacketWrite(element);\r\n        }\r\n\r\n\r\n        // " +
                    "UInt64\r\n        protected ulong PacketReadUInt64()\r\n        {\r\n            ulong" +
                    " value = ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value" +
                    " |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= R" +
                    "eceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= Receiv" +
                    "eBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuff" +
                    "er[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[Re" +
                    "ceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[Receive" +
                    "BufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[ReceiveBuffe" +
                    "rPosition++];\r\n            return value;\r\n        }\r\n        protected void Pack" +
                    "etWrite(ulong value)\r\n        {\r\n            PacketWrite((byte)(value >> 56));\r\n" +
                    "            PacketWrite((byte)(value >> 48));\r\n            PacketWrite((byte)(va" +
                    "lue >> 40));\r\n            PacketWrite((byte)(value >> 32));\r\n            PacketW" +
                    "rite((byte)(value >> 24));\r\n            PacketWrite((byte)(value >> 16));\r\n     " +
                    "       PacketWrite((byte)(value >> 8));\r\n            PacketWrite((byte)value);\r\n" +
                    "        }\r\n        protected ulong[] PacketReadListOfUInt64()\r\n        {\r\n      " +
                    "      var value = new ulong[PacketReadInt32()];\r\n            for (int index = 0;" +
                    " index < value.Length; index++)\r\n                value[index] = PacketReadUInt64" +
                    "();\r\n            return value;\r\n        }\r\n        protected void PacketWrite(ul" +
                    "ong[] value)\r\n        {\r\n            PacketWrite(value.Length);\r\n            for" +
                    "each (var element in value)\r\n                PacketWrite(element);\r\n        }\r\n\r" +
                    "\n        // Int64\r\n        protected long PacketReadInt64()\r\n        {\r\n        " +
                    "    long value = ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n         " +
                    "   value |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            va" +
                    "lue |= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |" +
                    "= ReceiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= Rec" +
                    "eiveBuffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveB" +
                    "uffer[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer" +
                    "[ReceiveBufferPosition++]; value <<= 8;\r\n            value |= ReceiveBuffer[Rece" +
                    "iveBufferPosition++];\r\n            return value;\r\n        }\r\n        protected v" +
                    "oid PacketWrite(long value)\r\n        {\r\n            PacketWrite((byte)(value >> " +
                    "56));\r\n            PacketWrite((byte)(value >> 48));\r\n            PacketWrite((b" +
                    "yte)(value >> 40));\r\n            PacketWrite((byte)(value >> 32));\r\n            " +
                    "PacketWrite((byte)(value >> 24));\r\n            PacketWrite((byte)(value >> 16));" +
                    "\r\n            PacketWrite((byte)(value >> 8));\r\n            PacketWrite((byte)va" +
                    "lue);\r\n        }\r\n        protected long[] PacketReadListOfInt64()\r\n        {\r\n " +
                    "           var value = new long[PacketReadInt32()];\r\n            for (int index " +
                    "= 0; index < value.Length; index++)\r\n                value[index] = PacketReadIn" +
                    "t64();\r\n            return value;\r\n        }\r\n        protected void PacketWrite" +
                    "(long[] value)\r\n        {\r\n            PacketWrite(value.Length);\r\n            f" +
                    "oreach (var element in value)\r\n                PacketWrite(element);\r\n        }\r" +
                    "\n        // Boolean\r\n        protected bool PacketReadBoolean()\r\n        {\r\n    " +
                    "        return ReceiveBuffer[ReceiveBufferPosition++] != 0;\r\n        }\r\n        " +
                    "protected void PacketWrite(bool value)\r\n        {\r\n            PacketWrite((byte" +
                    ")(value ? 1 : 0));\r\n        }\r\n        public bool[] PacketReadListOfBoolean()\r\n" +
                    "        {\r\n            var value = new bool[PacketReadInt32()];\r\n            for" +
                    " (int index = 0; index < value.Length; index++)\r\n                value[index] = " +
                    "PacketReadBoolean();\r\n            return value;\r\n        }\r\n        protected vo" +
                    "id PacketWrite(bool[] value)\r\n        {\r\n            PacketWrite(value.Length);\r" +
                    "\n            foreach (var element in value)\r\n                PacketWrite(element" +
                    ");\r\n        }\r\n\r\n        // Single\r\n        protected float PacketReadSingle()\r\n" +
                    "        {\r\n            var value = BitConverter.ToSingle(ReceiveBuffer, ReceiveB" +
                    "ufferPosition);\r\n            ReceiveBufferPosition += sizeof(float);\r\n          " +
                    "  return value;\r\n        }\r\n        protected void PacketWrite(float value)\r\n   " +
                    "     {\r\n            PacketWrite(BitConverter.GetBytes(value));\r\n        }\r\n     " +
                    "   protected float[] PacketReadListOfSingle()\r\n        {\r\n            var value " +
                    "= new float[PacketReadInt32()];\r\n            for (int index = 0; index < value.L" +
                    "ength; index++)\r\n                value[index] = PacketReadSingle();\r\n           " +
                    " return value;\r\n        }\r\n        protected void PacketWrite(float[] value)\r\n  " +
                    "      {\r\n            PacketWrite(value.Length);\r\n            foreach (var elemen" +
                    "t in value)\r\n                PacketWrite(element);\r\n        }\r\n\r\n        // Doub" +
                    "le\r\n        protected double PacketReadDouble()\r\n        {\r\n            var valu" +
                    "e = BitConverter.ToDouble(ReceiveBuffer, ReceiveBufferPosition);\r\n            Re" +
                    "ceiveBufferPosition += sizeof(double);\r\n            return value;\r\n        }\r\n  " +
                    "      protected void PacketWrite(double value)\r\n        {\r\n            PacketWri" +
                    "te(BitConverter.GetBytes(value));\r\n        }\r\n        protected double[] PacketR" +
                    "eadListOfDouble()\r\n        {\r\n            var value = new double[PacketReadInt32" +
                    "()];\r\n            for (int index = 0; index < value.Length; index++)\r\n          " +
                    "      value[index] = PacketReadDouble();\r\n            return value;\r\n        }\r\n" +
                    "        protected void PacketWrite(double[] value)\r\n        {\r\n            Packe" +
                    "tWrite(value.Length);\r\n            foreach (var element in value)\r\n             " +
                    "   PacketWrite(element);\r\n        }\r\n\r\n        // String\r\n        protected stri" +
                    "ng PacketReadString()\r\n        {\r\n            var bytes = PacketReadListOfByte()" +
                    ";\r\n            return Encoding.UTF8.GetString(bytes, 0, bytes.Length);\r\n        " +
                    "}\r\n        protected void PacketWrite(string value)\r\n        {\r\n            Pack" +
                    "etWrite(Encoding.UTF8.GetBytes(value));\r\n        }\r\n        protected string[] P" +
                    "acketReadListOfString()\r\n        {\r\n            var value = new string[PacketRea" +
                    "dInt32()];\r\n            for (int index = 0; index < value.Length; index++)\r\n    " +
                    "            value[index] = PacketReadString();\r\n            return value;\r\n     " +
                    "   }\r\n        protected void PacketWrite(string[] value)\r\n        {\r\n           " +
                    " PacketWrite(value.Length);\r\n            foreach (var element in value)\r\n       " +
                    "         PacketWrite(element);\r\n        }\r\n\r\n        // DateTime\r\n        protec" +
                    "ted DateTime PacketReadDateTime()\r\n        {\r\n            short year = PacketRea" +
                    "dInt16();\r\n            short month = PacketReadInt16();\r\n            short day =" +
                    " PacketReadInt16();\r\n            short hour = PacketReadInt16();\r\n            sh" +
                    "ort minute = PacketReadInt16();\r\n            short second = PacketReadInt16();\r\n" +
                    "            short millisecond = PacketReadInt16();\r\n\r\n            return new Dat" +
                    "eTime(year, month, day, hour, minute, second, millisecond);\r\n        }\r\n        " +
                    "protected void PacketWrite(DateTime value)\r\n        {\r\n            PacketWrite((" +
                    "short)value.Year);\r\n            PacketWrite((short)value.Month);\r\n            Pa" +
                    "cketWrite((short)value.Day);\r\n            PacketWrite((short)value.Hour);\r\n     " +
                    "       PacketWrite((short)value.Minute);\r\n            PacketWrite((short)value.S" +
                    "econd);\r\n            PacketWrite((short)value.Millisecond);\r\n        }\r\n\r\n      " +
                    "  protected DateTime[] PacketReadListOfDateTime()\r\n        {\r\n            var va" +
                    "lue = new DateTime[PacketReadInt32()];\r\n            for (int index = 0; index < " +
                    "value.Length; index++)\r\n                value[index] = PacketReadDateTime();\r\n  " +
                    "          return value;\r\n        }\r\n        protected void PacketWrite(DateTime[" +
                    "] value)\r\n        {\r\n            PacketWrite(value.Length);\r\n            foreach" +
                    " (var element in value)\r\n                PacketWrite(element);\r\n        }\r\n     " +
                    "   #endregion\r\n\r\n        protected abstract void OnReceive(uint key);\r\n\r\n       " +
                    " #region Dynamics\r\n        [Obsolete(\"DynamicType is obsolete. Consider using JS" +
                    "ON or XML serialized objects instead.\", false)]\r\n        protected void PacketWr" +
                    "iteDynamic(object value)\r\n        {\r\n            if (value is byte)\r\n           " +
                    " {\r\n                PacketWrite(true);\r\n                PacketWrite(@\"Byte\");\r\n " +
                    "               PacketWrite((byte)value);\r\n            }\r\n            else if (va" +
                    "lue is ushort)\r\n            {\r\n                PacketWrite(true);\r\n             " +
                    "   PacketWrite(@\"UInt16\");\r\n                PacketWrite((ushort)value);\r\n       " +
                    "     }\r\n            else if (value is short)\r\n            {\r\n                Pac" +
                    "ketWrite(true);\r\n                PacketWrite(@\"Int16\");\r\n                PacketW" +
                    "rite((short)value);\r\n            }\r\n            else if (value is uint)\r\n       " +
                    "     {\r\n                PacketWrite(true);\r\n                PacketWrite(@\"UInt32" +
                    "\");\r\n                PacketWrite((uint)value);\r\n            }\r\n            else " +
                    "if (value is int)\r\n            {\r\n                PacketWrite(true);\r\n          " +
                    "      PacketWrite(@\"Int32\");\r\n                PacketWrite((int)value);\r\n        " +
                    "    }\r\n            else if (value is ulong)\r\n            {\r\n                Pack" +
                    "etWrite(true);\r\n                PacketWrite(@\"UInt64\");\r\n                PacketW" +
                    "rite((ulong)value);\r\n            }\r\n            else if (value is long)\r\n       " +
                    "     {\r\n                PacketWrite(true);\r\n                PacketWrite(@\"Int64\"" +
                    ");\r\n                PacketWrite((long)value);\r\n            }\r\n            else i" +
                    "f (value is float)\r\n            {\r\n                PacketWrite(true);\r\n         " +
                    "       PacketWrite(@\"Single\");\r\n                PacketWrite((float)value);\r\n    " +
                    "        }\r\n            else if (value is double)\r\n            {\r\n               " +
                    " PacketWrite(true);\r\n                PacketWrite(@\"Double\");\r\n                Pa" +
                    "cketWrite((double)value);\r\n            }\r\n            else if (value is bool)\r\n " +
                    "           {\r\n                PacketWrite(true);\r\n                PacketWrite(@\"" +
                    "Boolean\");\r\n                PacketWrite((bool)value);\r\n            }\r\n          " +
                    "  else if (value is string)\r\n            {\r\n                PacketWrite(true);\r\n" +
                    "                PacketWrite(@\"String\");\r\n                PacketWrite((string)val" +
                    "ue);\r\n            }\r\n            else if (value is DateTime)\r\n            {\r\n   " +
                    "             PacketWrite(true);\r\n                PacketWrite(@\"DateTime\");\r\n    " +
                    "            PacketWrite((DateTime)value);\r\n            }\r\n            else\r\n    " +
                    "            PacketWrite(false);\r\n        }\r\n        [Obsolete(\"DynamicType is ob" +
                    "solete. Consider using JSON or XML serialized objects instead.\", false)]\r\n      " +
                    "  protected object PacketReadDynamic()\r\n        {\r\n            if (PacketReadBoo" +
                    "lean())\r\n            {\r\n                switch (PacketReadString())\r\n           " +
                    "     {\r\n                    case \"Byte\":\r\n                        return PacketR" +
                    "eadByte();\r\n                    case \"UInt16\":\r\n                        return P" +
                    "acketReadUInt16();\r\n                    case \"Int16\":\r\n                        r" +
                    "eturn PacketReadInt16();\r\n                    case \"UInt32\":\r\n                  " +
                    "      return PacketReadUInt32();\r\n                    case \"Int32\":\r\n           " +
                    "             return PacketReadInt32();\r\n                    case \"UInt64\":\r\n    " +
                    "                    return PacketReadUInt64();\r\n                    case \"Int64\"" +
                    ":\r\n                        return PacketReadInt64();\r\n                    case \"" +
                    "Single\":\r\n                        return PacketReadSingle();\r\n                  " +
                    "  case \"Double\":\r\n                        return PacketReadDouble();\r\n          " +
                    "          case \"Boolean\":\r\n                        return PacketReadBoolean();\r\n" +
                    "                    case \"String\":\r\n                        return PacketReadStr" +
                    "ing();\r\n                    case \"DateTime\":\r\n                        return Pac" +
                    "ketReadDateTime();\r\n                }\r\n            }\r\n            return null;\r\n" +
                    "        }\r\n        [Obsolete(\"DynamicType is obsolete. Consider using JSON or XM" +
                    "L serialized objects instead.\", false)]\r\n        protected object[] PacketReadLi" +
                    "stOfDynamic()\r\n        {\r\n            var value = new object[PacketReadInt32()];" +
                    "\r\n            for (int index = 0; index < value.Length; index++)\r\n              " +
                    "  value[index] = PacketReadDynamic();\r\n            return value;\r\n        }\r\n   " +
                    "     [Obsolete(\"DynamicType is obsolete. Consider using JSON or XML serialized o" +
                    "bjects instead.\", false)]\r\n        protected void PacketWriteDynamic(object[] va" +
                    "lue)\r\n        {\r\n            PacketWrite(value.Length);\r\n            foreach (va" +
                    "r element in value)\r\n                PacketWriteDynamic(element);\r\n        }\r\n  " +
                    "      #endregion\r\n\r\n\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class TcpChannelBaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
