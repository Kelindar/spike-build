spike.ServerChannel = function(endPoint){

	/* Server EndPoint url. */
	this.endPoint = endPoint;

	/* 'Socket' object to use for all communication. */
	this.socket = new spike.ServerSocket(this);

	/* Connects to the server. */
	this.connect = function(){
		this.socket.connect();
	};

	/* Sends a packet to the server. */
	this.send = function(operationNumber, writer){
		if(typeof operationNumber === 'undefined' )
			throw new Error("Attempting to send without specifying the operation.")
		if(typeof writer === 'undefined' || writer != null)
			throw new Error("Attempting to send null buffer.")

		this.socket.send(operationNumber, writer);
	}

	// Events
<# foreach(var receive in Model.Receives){ #>
	/* Event: invoked when the <#= receive.Name #> inform is received from the server. */
	this.<#= receive.Name.CamelCase() #> = null; 

<# } #>
		    
	// Send Methods    
<# foreach(var send in Model.Sends) { #>
	/* Sends a <#= send.Name #> request to the remote server. */	
	this.<#= send.Name #> = function(<#	
			var first = true;
			foreach(var member in send.Members){
				if(!first) Write(", ");
				Write(member.Name.CamelCase());
				first = false;
			}
		#>){
		
		var writer = new spike.PacketWriter();
<#		foreach(var member in send.Members) { #>
		writer.write<#= member.IsList ? "ArrayOf" : string.Empty #><#= member.Type #>(<#= member.Name.CamelCase() #>);
<#		} #>
		
		<#= send.Compressed ? "writer.compress();" : "" #>
		this.send(0x<#= send.Id.ToString("X") #>u, request);
	}

<# } #>

	// Dispatcher
	this.onReceive = function(key, reader){
		switch (key){
<#			foreach(var receive in Model.Receives){ #>				
			case 0x<#= receive.Id.ToString("X") #>u: {
				<#= receive.Compressed ? "reader.Decompress();" : "" #>
				var packet = new Object();
<#				foreach(var member in receive.Members){ #>
				packet.<#= member.Name.CamelCase() #> = reader.read<#= member.IsList ? "ArrayOf" : string.Empty #><#= member.Type #>();
<#				} #>

				// Call the event now
				if (<#= receive.Name.CamelCase() #> != null)
					<#= receive.Name.CamelCase() #>(packet, this);
				break;
				}

<#				} #>

				default: throw new Error("Received an unknown packet with '" + key + "' key.");
			}
		}


}
