import (
	"encoding/binary"
	"bytes"
	"time"
	"errors"
) 


// Represents a packet writer that can be used to serialize packets.
type PacketWriter struct {
	buffer *bytes.Buffer
}

// Constructs a new writer
func NewPacketWriter() *PacketWriter {
	writer := new(PacketWriter)
	writer.buffer = new(bytes.Buffer)
	return writer
}

// Compresses the packet body
func (this *PacketWriter) Compress(){
	this.buffer = bytes.NewBuffer(Compress(this.buffer.Bytes()))
}


// ------------------ Types ------------------------

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeBoolean(value bool) error {
	var b byte;
	if(value){
		b = 1
	}
	return binary.Write(this.buffer, binary.BigEndian, b)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeByte(value byte) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeSByte(value int8) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeInt8(value int8) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeInt16(value int16) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeInt32(value int32) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeInt64(value int64) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeUInt8(value uint8) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeUInt16(value uint16) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeUInt32(value uint32) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeUInt64(value uint64) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeSingle(value float32) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeDouble(value float64) error {
	return binary.Write(this.buffer, binary.BigEndian, value)
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeString(value string) error {
	this.writeInt32(int32(len(value)))
	this.buffer.WriteString(value)
	return nil
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeDateTime(value time.Time) error {
	this.writeInt16(int16(value.Year()))
	this.writeInt16(int16(value.Month()))
	this.writeInt16(int16(value.Day()))
	this.writeInt16(int16(value.Hour()))
	this.writeInt16(int16(value.Minute()))
	this.writeInt16(int16(value.Second()))
	this.writeInt16(int16(value.Nanosecond() / 1000000))
	return nil
}


// Writes a value to the underlying buffer.
func (this *PacketWriter) writeDynamicType(value interface{}) error {
<# foreach(var type in Model.Types){ #>
	if v, ok := value.(<#=GoBuilder.GetNativeType(type)#>); ok {
		this.writeBoolean(true)
		this.writeString("<#=type#>")
		this.write<#=type#>(v)
		return nil
	}

<# } #>
   	return errors.New("spike.writeDynamicType: incompatible type")
}

<# foreach(var type in Model.Types){ #>
// Writes a value to the underlying buffer.
func (this *PacketWriter) writeListOf<#=type#>(value []<#=GoBuilder.GetNativeType(type)#>) error {
	this.writeInt32(int32(len(value)))
	for _, v := range value{
		err := this.write<#=type#>(v)
		if (err != nil){
			return err
		}
	}
	return nil
}

<# } #>

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeListOfDynamicType(value []interface{}) error {
	this.writeInt32(int32(len(value)))
	for _, v := range value{
		err := this.writeDynamicType(v)
		if (err != nil){
			return err
		}
	}
	return nil
}

<# foreach(var customType in Model.CustomTypes) { #>
// Writes a value to the underlying buffer.
func (this *PacketWriter) write<#= customType.Name #>(value <#= customType.Name #>) error {
<# foreach(var member in customType.Members){ #>
	this.write<#=member.Type#>(value.<#= member.Name.CamelCase() #>);
<# } #>
	return nil
}

// Writes a value to the underlying buffer.
func (this *PacketWriter) writeListOf<#= customType.Name #>(value []<#= customType.Name #>) error {
	this.writeInt32(int32(len(value)))
	for _, v := range value{
		err := this.write<#= customType.Name #>(v)
		if (err != nil){
			return err
		}
	}
	return nil
}
<# } #>