import (
	"encoding/binary"
	"bytes"
	"time"
) 


// Represents a packet reader that can be used to deserialize packets.
type PacketReader struct {
	buffer *bytes.Buffer
}

// Constructs a new reader on the buffer slice
func NewPacketReader(buf []byte) *PacketReader {
	reader := new(PacketReader)
	reader.buffer = bytes.NewBuffer(buf)
	return reader
}

// Decompresses the packet body
func (this *PacketReader) Decompress(){
	this.buffer = bytes.NewBuffer(Decompress(this.buffer.Bytes()))
}

// ------------------ Types ------------------------


// Reads a value from the underlying buffer.
func (this *PacketReader) ReadBoolean() (value bool, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadByte() (value byte, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadSByte() (value int8, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadInt16() (value int16, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadInt32() (value int32, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadInt64() (value int64, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadUInt16() (value uint16, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadUInt32() (value uint32, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadUInt64() (value uint64, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadSingle() (value float32, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadDouble() (value float64, err error) {
	err = binary.Read(this.buffer, binary.BigEndian, &value)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadDateTime() (value time.Time, err error) {
	Y, _ := this.ReadInt16()
	M, _ := this.ReadInt16()
	d, _ := this.ReadInt16()
	h, _ := this.ReadInt16()
	m, _ := this.ReadInt16()
	s, _ := this.ReadInt16()
	ms,_ := this.ReadInt16()
	value = time.Date(int(Y), time.Month(int(M)), int(d), int(h), int(m), int(s), int(ms) * 1000000, time.UTC)
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadString() (value string, err error) {
	size, _ := this.ReadInt32()
	buf  := make([]byte, size)
	binary.Read(this.buffer, binary.BigEndian, &buf)
	value = string(buf[:size])
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadDynamicType() (value interface{}, err error) {
	valid, err := this.ReadBoolean()
	if !valid { 
		return nil, err 
	}

	name, err := this.ReadString()
	switch name {
<# foreach(var type in Model.Types){ #>
		case "<#=type#>": {
			value, err = this.Read<#=type#>()
			return
		}
<# } #>
	}

	return nil, err
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadListOfDynamicType() (value []interface{}, err error)  {
	size, _ := this.ReadInt32()
	value = make([]interface{}, size)
	for i := 0; i < int(size); i++ {
		value[i], _ = this.ReadDynamicType()
	}
	return
}

<# foreach(var type in Model.Types){ #>
// Reads a value from the underlying buffer.
func (this *PacketReader) ReadListOf<#=type#>() (value []<#=GoBuilder.GetNativeType(type)#>, err error)  {
	size, _ := this.ReadInt32()
	value = make([]<#=GoBuilder.GetNativeType(type)#>, size)
	for i := 0; i < int(size); i++ {
		value[i], _ = this.Read<#=type#>()
	}
	return
}

<# } #>

<# foreach(var customType in Model.CustomTypes) { #>
// Reads a value from the underlying buffer.
func (this *PacketReader) Read<#=customType.Name#>() (value <#=customType.Name#>, err error) {
<# foreach(var member in customType.Members) { #>
	value.<#= member.Name #>, err = this.Read<#= member.IsList ? "ListOf" : string.Empty #><#= member.Type #>()
<# } #>
	return
}

// Reads a value from the underlying buffer.
func (this *PacketReader) ReadListOf<#=customType.Name#>() (value []<#=customType.Name#>, err error)  {
	size, _ := this.ReadInt32()
	value = make([]<#=customType.Name#>, size)
	for i := 0; i < int(size); i++ {
		value[i], _ = this.Read<#=customType.Name#>()
	}
	return
}
<# } #>