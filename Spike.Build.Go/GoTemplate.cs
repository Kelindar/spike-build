// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Spike.Build.Go
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class GoTemplate : GoTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("package spike\r\n\r\n");
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "PacketCompressor") { 
            
            #line default
            #line hidden
            this.Write("// LZF Compression Algorithm created by The Golly Authors (https://github.com/tav" +
                    "/golly).\r\n// Public Domain (-) 2010-2011, released under Golly UNLICENSE.\r\n\r\ncon" +
                    "st (\r\n\t// The hashTableFactor can be set to anything from 13 all the way up to 2" +
                    "3.\r\n\t// A larger hash table leads to better compression ratios at the cost of\r\n\t" +
                    "// speed and vice-versa.\r\n\thashTableFactor uint32 = 16\r\n\thashTableSize   uint32 " +
                    "= 1 << hashTableFactor\r\n\tmaxLiteral      uint32 = 1 << 5\r\n\tmaxOffset       int64" +
                    "  = 1 << 13\r\n\tmaxBackref      uint32 = (1 << 8) + (1 << 3)\r\n\r\n\t// The maximum si" +
                    "ze of LZF encoded byte stream is limited to a relatively\r\n\t// sane size.\r\n\tMaxSi" +
                    "ze uint32 = 1 << 30\r\n)\r\n\r\n// The LZF compression format is composed of::\r\n//\r\n//" +
                    "       000LLLLL <L+1>               ; literal reference\r\n//       LLLooooo ooooo" +
                    "ooo            ; back reference L\r\n//       111ooooo LLLLLLLL oooooooo   ; back " +
                    "reference L+7\r\n//\r\n// An upcoming literal reference is identified by a control b" +
                    "yte which has its 3\r\n// most significant bits set to zero. The control byte also" +
                    " indicates the length\r\n// of the particular reference -- which can be up to 32 b" +
                    "ytes long.\r\n//\r\n// An upcoming back reference is indicated by control bytes whic" +
                    "h have their 3\r\n// most significant bits bits set to something other than ``000`" +
                    "`. There are two\r\n// slightly different variants.\r\n//\r\n// The standard variant i" +
                    "ndicates the length of the back reference in the 3 most\r\n// significant bits and" +
                    " the rest of the byte and the proceeding byte provide the\r\n// offset value for t" +
                    "he back reference.\r\n//\r\n// However, if the length is ``111``, that is 7, then it" +
                    " indicates the presence\r\n// of an extended back reference. For this the proceedi" +
                    "ng byte provides the full\r\n// value of the length and it\'s the next byte after t" +
                    "hat which together with the\r\n// remainder of the first gives the offset value fo" +
                    "r the back reference.\r\n//\r\nfunc Compress(input []byte) (output []byte) {\r\n\r\n\tinp" +
                    "utLength := uint32(len(input))\r\n\tif inputLength <= 4 || inputLength >= MaxSize {" +
                    "\r\n\t\treturn nil\r\n\t}\r\n\r\n\tvar offset int64\r\n\tvar backref, diff, hslot, hval, iidx, " +
                    "length, literal, max, oidx uint32\r\n\r\n\toutput = make([]byte, inputLength+4)\r\n\thas" +
                    "hTable := make([]uint32, hashTableSize)\r\n\thval = uint32(input[0]<<8) | uint32(in" +
                    "put[1])\r\n\tsentinel := inputLength - 2\r\n\r\n\toidx = 5\r\n\r\n\tfor iidx < sentinel {\r\n\r\n" +
                    "\t\thval = (hval << 8) | uint32(input[iidx+2])\r\n\t\thslot = ((hval >> (24 - hashTabl" +
                    "eFactor)) - (hval * 5)) & (hashTableSize - 1)\r\n\t\tbackref = hashTable[hslot]\r\n\t\th" +
                    "ashTable[hslot] = iidx\r\n\t\toffset = int64(iidx) - int64(backref) - 1\r\n\r\n\t\tif (off" +
                    "set < maxOffset) &&\r\n\t\t\t((iidx + 4) < inputLength) &&\r\n\t\t\t(backref > 0) &&\r\n\t\t\t(" +
                    "input[backref] == input[iidx]) &&\r\n\t\t\t(input[backref+1] == input[iidx+1]) &&\r\n\t\t" +
                    "\t(input[backref+2] == input[iidx+2]) {\r\n\r\n\t\t\tlength = 2\r\n\t\t\tmax = inputLength - " +
                    "iidx - length\r\n\t\t\tif max > maxBackref {\r\n\t\t\t\tmax = maxBackref\r\n\t\t\t}\r\n\r\n\t\t\t// Fir" +
                    "st, a faster conservative test.\r\n\t\t\tif (oidx) >= inputLength {\r\n\t\t\t\t// And, if s" +
                    "o, a second -- the exact but rare test.\r\n\t\t\t\tif literal > 0 {\r\n\t\t\t\t\tdiff = 0\r\n\t\t" +
                    "\t\t} else {\r\n\t\t\t\t\tdiff = 1\r\n\t\t\t\t}\r\n\t\t\t\tif (oidx - diff) >= inputLength {\r\n\t\t\t\t\tre" +
                    "turn nil\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\toutput[oidx-literal-1] = byte(literal - 1)\r\n\t\t\tif li" +
                    "teral == 0 {\r\n\t\t\t\toidx--\r\n\t\t\t}\r\n\r\n\t\t\tfor {\r\n\t\t\t\tlength++\r\n\t\t\t\tif (length >= max)" +
                    " || (input[backref+length] != input[iidx+length]) {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n" +
                    "\t\t\tlength -= 2\r\n\t\t\tiidx++\r\n\r\n\t\t\tif length < 7 {\r\n\t\t\t\toutput[oidx] = byte(uint32(" +
                    "offset>>8) + (length << 5))\r\n\t\t\t\toidx++\r\n\t\t\t} else {\r\n\t\t\t\toutput[oidx] = byte((o" +
                    "ffset >> 8) + (7 << 5))\r\n\t\t\t\toutput[oidx+1] = byte(length - 7)\r\n\t\t\t\toidx += 2\r\n\t" +
                    "\t\t}\r\n\r\n\t\t\toutput[oidx] = byte(offset)\r\n\t\t\tliteral = 0\r\n\t\t\toidx += 2\r\n\t\t\tiidx += " +
                    "length + 1\r\n\r\n\t\t\tif iidx >= inputLength-2 {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\r\n\t\t\tiidx -= 2\r\n\r\n" +
                    "\t\t\thval = (uint32(input[iidx])<<8 | uint32(input[iidx+1])<<8) | uint32(input[iid" +
                    "x+2])\r\n\t\t\thslot = ((hval >> (24 - hashTableFactor)) - (hval * 5)) & (hashTableSi" +
                    "ze - 1)\r\n\t\t\thashTable[hslot] = iidx\r\n\t\t\tiidx++\r\n\r\n\t\t\thval = (hval << 8) | uint32" +
                    "(input[iidx+2])\r\n\t\t\thslot = ((hval >> (24 - hashTableFactor)) - (hval * 5)) & (h" +
                    "ashTableSize - 1)\r\n\t\t\thashTable[hslot] = iidx\r\n\t\t\tiidx++\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif " +
                    "oidx >= inputLength-4 {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\toutput[oidx] = input[iidx]\r\n" +
                    "\t\t\tiidx++\r\n\t\t\toidx++\r\n\t\t\tliteral++\r\n\r\n\t\t\tif literal == maxLiteral {\r\n\t\t\t\toutput[" +
                    "oidx-literal-1] = byte(literal - 1)\r\n\t\t\t\tliteral = 0\r\n\t\t\t\toidx++\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r" +
                    "\n\t}\r\n\r\n\tif (oidx - 1) > inputLength {\r\n\t\treturn nil\r\n\t}\r\n\r\n\tfor iidx < inputLeng" +
                    "th {\r\n\t\toutput[oidx] = input[iidx]\r\n\t\tiidx++\r\n\t\toidx++\r\n\t\tliteral++\r\n\t\tif litera" +
                    "l == maxLiteral {\r\n\t\t\toutput[oidx-literal-1] = byte(literal - 1)\r\n\t\t\tliteral = 0" +
                    "\r\n\t\t\toidx++\r\n\t\t}\r\n\t}\r\n\r\n\toutput[oidx-literal-1] = byte(literal - 1)\r\n\tif literal" +
                    " == 0 {\r\n\t\toidx -= 1\r\n\t}\r\n\r\n\toutput[0] = byte((inputLength >> 24) & 255)\r\n\toutpu" +
                    "t[1] = byte((inputLength >> 16) & 255)\r\n\toutput[2] = byte((inputLength >> 8) & 2" +
                    "55)\r\n\toutput[3] = byte((inputLength >> 0) & 255)\r\n\r\n\treturn output[0:oidx]\r\n\r\n}\r" +
                    "\n\r\nfunc Decompress(input []byte) (output []byte) {\r\n\r\n\tinputLength := uint32(len" +
                    "(input))\r\n\tif inputLength <= 4 {\r\n\t\treturn nil\r\n\t}\r\n\r\n\tvar backref int64\r\n\tvar c" +
                    "trl, iidx, length, oidx, outputLength uint32\r\n\r\n\toutputLength = ((uint32(input[0" +
                    "]) << 24) | (uint32(input[1]) << 16) | (uint32(input[2]) << 8) | uint32(input[3]" +
                    "))\r\n\r\n\tif outputLength >= MaxSize {\r\n\t\treturn nil\r\n\t}\r\n\r\n\toutput = make([]byte, " +
                    "outputLength, outputLength)\r\n\tiidx = 4\r\n\r\n\tfor iidx < inputLength {\r\n\r\n\t\t// Get " +
                    "the control byte.\r\n\t\tctrl = uint32(input[iidx])\r\n\t\tiidx++\r\n\r\n\t\tif ctrl < (1 << 5" +
                    ") {\r\n\r\n\t\t\t// The control byte indicates a literal reference.\r\n\t\t\tctrl++\r\n\t\t\tif o" +
                    "idx+ctrl > outputLength {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\t// Safety check.\r\n\t\t\tif ii" +
                    "dx+ctrl > inputLength {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\tfor {\r\n\t\t\t\toutput[oidx] = in" +
                    "put[iidx]\r\n\t\t\t\tiidx++\r\n\t\t\t\toidx++\r\n\t\t\t\tctrl--\r\n\t\t\t\tif ctrl == 0 {\r\n\t\t\t\t\tbreak\r\n\t" +
                    "\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The control byte indicates a back reference.\r\n" +
                    "\t\t\tlength = ctrl >> 5\r\n\t\t\tbackref = int64(oidx - ((ctrl & 31) << 8) - 1)\r\n\r\n\t\t\t/" +
                    "/ Safety check.\r\n\t\t\tif iidx >= inputLength {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\t// It\'s" +
                    " an extended back reference. Read the extended length before\r\n\t\t\t// reading the " +
                    "full back reference location.\r\n\t\t\tif length == 7 {\r\n\t\t\t\tlength += uint32(input[i" +
                    "idx])\r\n\t\t\t\tiidx++\r\n\t\t\t\t// Safety check.\r\n\t\t\t\tif iidx >= inputLength {\r\n\t\t\t\t\tretu" +
                    "rn nil\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Put together the full back reference location.\r\n\t\t\t" +
                    "backref -= int64(input[iidx])\r\n\t\t\tiidx++\r\n\r\n\t\t\tif oidx+length+2 > outputLength {" +
                    "\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\tif backref < 0 {\r\n\t\t\t\treturn nil\r\n\t\t\t}\r\n\r\n\t\t\toutput" +
                    "[oidx] = output[backref]\r\n\t\t\toidx++\r\n\t\t\tbackref++\r\n\t\t\toutput[oidx] = output[back" +
                    "ref]\r\n\t\t\toidx++\r\n\t\t\tbackref++\r\n\r\n\t\t\tfor {\r\n\t\t\t\toutput[oidx] = output[backref]\r\n\t" +
                    "\t\t\toidx++\r\n\t\t\t\tbackref++\r\n\t\t\t\tlength--\r\n\t\t\t\tif length == 0 {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r" +
                    "\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn output\r\n\r\n}\r\n\r\nfunc Preset(dict []byte) (preset *l" +
                    "zfPreset) {\r\n\ttemp := Compress(dict)\r\n\tif temp == nil {\r\n\t\treturn nil\r\n\t}\r\n\tpres" +
                    "et = &lzfPreset{}\r\n\tpreset.dict = dict\r\n\tpreset.length = len(dict)\r\n\tpreset.comp" +
                    "ressed = temp\r\n\treturn\r\n}\r\n\r\ntype lzfPreset struct {\r\n\tdict       []byte\r\n\tlengt" +
                    "h     int\r\n\tcompressed []byte\r\n}\r\n\r\nfunc (preset *lzfPreset) Compress(input []by" +
                    "te) (output []byte) {\r\n\treturn\r\n}\r\n\r\nfunc (preset *lzfPreset) Decompress(input [" +
                    "]byte) (output []byte) {\r\n\tcombined := make([]byte, preset.length+len(input))\r\n\t" +
                    "_ = combined\r\n\treturn\r\n}");
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "Packet") { 
            
            #line default
            #line hidden
            
            #line 1 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
 if (TargetOperation.Members.Any(m => m.Type == "DateTime")) { 
            
            #line default
            #line hidden
            this.Write("import \"time\"\r\n\r\n");
            
            #line 4 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
 } 
            
            #line default
            #line hidden
            this.Write("// Represents a serializable packet of type ");
            
            #line 5 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write(".\r\ntype ");
            
            #line 6 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetOperation.Name));
            
            #line default
            #line hidden
            this.Write(" struct {\r\n");
            
            #line 7 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
 foreach(var member in TargetOperation.Members){ 
            
            #line default
            #line hidden
            this.Write("\r\n\t// Gets or sets the member \'");
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the packet.\r\n\t");
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name.CamelCase()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(member)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 11 "D:\Workspace\Spike.Build\Spike.Build.Go\Packet.t4"
 } 
            
            #line default
            #line hidden
            this.Write("}");
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 11 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "PacketWriter") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("import (\r\n\t\"encoding/binary\"\r\n\t\"bytes\"\r\n\t\"time\"\r\n\t\"errors\"\r\n) \r\n\r\n\r\n// Represents" +
                    " a packet writer that can be used to serialize packets.\r\ntype PacketWriter struc" +
                    "t {\r\n\tbuffer *bytes.Buffer\r\n}\r\n\r\n// Constructs a new writer\r\nfunc NewPacketWrite" +
                    "r() *PacketWriter {\r\n\twriter := new(PacketWriter)\r\n\twriter.buffer = new(bytes.Bu" +
                    "ffer)\r\n\treturn writer\r\n}\r\n\r\n// Compresses the packet body\r\nfunc (this *PacketWri" +
                    "ter) Compress(){\r\n\tthis.buffer = bytes.NewBuffer(Compress(this.buffer.Bytes()))\r" +
                    "\n}\r\n\r\n\r\n// ------------------ Types ------------------------\r\n\r\n// Writes a valu" +
                    "e to the underlying buffer.\r\nfunc (this *PacketWriter) writeBoolean(value bool) " +
                    "error {\r\n\tvar b byte;\r\n\tif(value){\r\n\t\tb = 1\r\n\t}\r\n\treturn binary.Write(this.buffe" +
                    "r, binary.BigEndian, b)\r\n}\r\n\r\n// Writes a value to the underlying buffer.\r\nfunc " +
                    "(this *PacketWriter) writeByte(value byte) error {\r\n\treturn binary.Write(this.bu" +
                    "ffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the underlying buffer." +
                    "\r\nfunc (this *PacketWriter) writeSByte(value int8) error {\r\n\treturn binary.Write" +
                    "(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the underlying" +
                    " buffer.\r\nfunc (this *PacketWriter) writeInt8(value int8) error {\r\n\treturn binar" +
                    "y.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the und" +
                    "erlying buffer.\r\nfunc (this *PacketWriter) writeInt16(value int16) error {\r\n\tret" +
                    "urn binary.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value t" +
                    "o the underlying buffer.\r\nfunc (this *PacketWriter) writeInt32(value int32) erro" +
                    "r {\r\n\treturn binary.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes " +
                    "a value to the underlying buffer.\r\nfunc (this *PacketWriter) writeInt64(value in" +
                    "t64) error {\r\n\treturn binary.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n/" +
                    "/ Writes a value to the underlying buffer.\r\nfunc (this *PacketWriter) writeUInt8" +
                    "(value uint8) error {\r\n\treturn binary.Write(this.buffer, binary.BigEndian, value" +
                    ")\r\n}\r\n\r\n// Writes a value to the underlying buffer.\r\nfunc (this *PacketWriter) w" +
                    "riteUInt16(value uint16) error {\r\n\treturn binary.Write(this.buffer, binary.BigEn" +
                    "dian, value)\r\n}\r\n\r\n// Writes a value to the underlying buffer.\r\nfunc (this *Pack" +
                    "etWriter) writeUInt32(value uint32) error {\r\n\treturn binary.Write(this.buffer, b" +
                    "inary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the underlying buffer.\r\nfunc " +
                    "(this *PacketWriter) writeUInt64(value uint64) error {\r\n\treturn binary.Write(thi" +
                    "s.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the underlying buf" +
                    "fer.\r\nfunc (this *PacketWriter) writeSingle(value float32) error {\r\n\treturn bina" +
                    "ry.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a value to the un" +
                    "derlying buffer.\r\nfunc (this *PacketWriter) writeDouble(value float64) error {\r\n" +
                    "\treturn binary.Write(this.buffer, binary.BigEndian, value)\r\n}\r\n\r\n// Writes a val" +
                    "ue to the underlying buffer.\r\nfunc (this *PacketWriter) writeString(value string" +
                    ") error {\r\n\tthis.writeInt32(int32(len(value)))\r\n\tthis.buffer.WriteString(value)\r" +
                    "\n\treturn nil\r\n}\r\n\r\n// Writes a value to the underlying buffer.\r\nfunc (this *Pack" +
                    "etWriter) writeDateTime(value time.Time) error {\r\n\tthis.writeInt16(int16(value.Y" +
                    "ear()))\r\n\tthis.writeInt16(int16(value.Month()))\r\n\tthis.writeInt16(int16(value.Da" +
                    "y()))\r\n\tthis.writeInt16(int16(value.Hour()))\r\n\tthis.writeInt16(int16(value.Minut" +
                    "e()))\r\n\tthis.writeInt16(int16(value.Second()))\r\n\tthis.writeInt16(int16(value.Nan" +
                    "osecond() / 1000000))\r\n\treturn nil\r\n}\r\n\r\n\r\n// Writes a value to the underlying b" +
                    "uffer.\r\nfunc (this *PacketWriter) writeDynamicType(value interface{}) error {\r\n");
            
            #line 120 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
 foreach(var type in Model.Types){ 
            
            #line default
            #line hidden
            this.Write("\tif v, ok := value.(");
            
            #line 121 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(type)));
            
            #line default
            #line hidden
            this.Write("); ok {\r\n\t\tthis.writeBoolean(true)\r\n\t\tthis.writeString(\"");
            
            #line 123 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("\")\r\n\t\tthis.write");
            
            #line 124 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("(v)\r\n\t\treturn nil\r\n\t}\r\n\r\n");
            
            #line 128 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
 } 
            
            #line default
            #line hidden
            this.Write("   \treturn errors.New(\"spike.writeDynamicType: incompatible type\")\r\n}\r\n\r\n");
            
            #line 132 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
 foreach(var type in Model.Types){ 
            
            #line default
            #line hidden
            this.Write("// Writes a value to the underlying buffer.\r\nfunc (this *PacketWriter) writeListO" +
                    "f");
            
            #line 134 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("(value []");
            
            #line 134 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(type)));
            
            #line default
            #line hidden
            this.Write(") error {\r\n\tthis.writeInt32(int32(len(value)))\r\n\tfor _, v := range value{\r\n\t\terr " +
                    ":= this.write");
            
            #line 137 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("(v)\r\n\t\tif (err != nil){\r\n\t\t\treturn err\r\n\t\t}\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n");
            
            #line 145 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketWriter.t4"
 } 
            
            #line default
            #line hidden
            this.Write(@"
// Writes a value to the underlying buffer.
func (this *PacketWriter) writeListOfDynamicType(value []interface{}) error {
	this.writeInt32(int32(len(value)))
	for _, v := range value{
		err := this.writeDynamicType(v)
		if (err != nil){
			return err
		}
	}
	return nil
}");
            this.Write(" ");
            
            #line 11 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 12 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "PacketReader") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("import (\r\n\t\"encoding/binary\"\r\n\t\"bytes\"\r\n\t\"time\"\r\n) \r\n\r\n\r\n// Represents a packet r" +
                    "eader that can be used to deserialize packets.\r\ntype PacketReader struct {\r\n\tbuf" +
                    "fer *bytes.Buffer\r\n}\r\n\r\n// Constructs a new reader on the buffer slice\r\nfunc New" +
                    "PacketReader(buf []byte) *PacketWriter {\r\n\treader := new(PacketWriter)\r\n\treader." +
                    "buffer = bytes.NewBuffer(buf)\r\n\treturn reader\r\n}\r\n\r\n// Decompresses the packet b" +
                    "ody\r\nfunc (this *PacketReader) Decompress(){\r\n\tthis.buffer = bytes.NewBuffer(Dec" +
                    "ompress(this.buffer.Bytes()))\r\n}\r\n\r\n// ------------------ Types ----------------" +
                    "--------\r\n\r\n\r\n// Reads a value from the underlying buffer.\r\nfunc (this *PacketRe" +
                    "ader) readBoolean() (value bool, err error) {\r\n\terr = binary.Read(this.buffer, b" +
                    "inary.BigEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from the underlying buf" +
                    "fer.\r\nfunc (this *PacketReader) readByte() (value byte, err error) {\r\n\terr = bin" +
                    "ary.Read(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value " +
                    "from the underlying buffer.\r\nfunc (this *PacketReader) readSByte() (value int8, " +
                    "err error) {\r\n\terr = binary.Read(this.buffer, binary.BigEndian, &value)\r\n\treturn" +
                    "\r\n}\r\n\r\n// Reads a value from the underlying buffer.\r\nfunc (this *PacketReader) r" +
                    "eadInt16() (value int16, err error) {\r\n\terr = binary.Read(this.buffer, binary.Bi" +
                    "gEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from the underlying buffer.\r\nfu" +
                    "nc (this *PacketReader) readInt32() (value int32, err error) {\r\n\terr = binary.Re" +
                    "ad(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from t" +
                    "he underlying buffer.\r\nfunc (this *PacketReader) readInt64() (value int64, err e" +
                    "rror) {\r\n\terr = binary.Read(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r\n" +
                    "\r\n// Reads a value from the underlying buffer.\r\nfunc (this *PacketReader) readUI" +
                    "nt16() (value uint16, err error) {\r\n\terr = binary.Read(this.buffer, binary.BigEn" +
                    "dian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from the underlying buffer.\r\nfunc " +
                    "(this *PacketReader) readUInt32() (value uint32, err error) {\r\n\terr = binary.Rea" +
                    "d(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from th" +
                    "e underlying buffer.\r\nfunc (this *PacketReader) readUInt64() (value uint64, err " +
                    "error) {\r\n\terr = binary.Read(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r" +
                    "\n\r\n// Reads a value from the underlying buffer.\r\nfunc (this *PacketReader) readS" +
                    "ingle() (value float32, err error) {\r\n\terr = binary.Read(this.buffer, binary.Big" +
                    "Endian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from the underlying buffer.\r\nfun" +
                    "c (this *PacketReader) readDouble() (value float64, err error) {\r\n\terr = binary." +
                    "Read(this.buffer, binary.BigEndian, &value)\r\n\treturn\r\n}\r\n\r\n// Reads a value from" +
                    " the underlying buffer.\r\nfunc (this *PacketReader) readDateTime() (value time.Ti" +
                    "me, err error) {\r\n\tY, _ := this.readInt16()\r\n\tM, _ := this.readInt16()\r\n\td, _ :=" +
                    " this.readInt16()\r\n\th, _ := this.readInt16()\r\n\tm, _ := this.readInt16()\r\n\ts, _ :" +
                    "= this.readInt16()\r\n\tms,_ := this.readInt16()\r\n\tvalue = time.Date(int(Y), time.M" +
                    "onth(int(M)), int(d), int(h), int(m), int(s), int(ms) * 1000000, time.UTC)\r\n\tret" +
                    "urn\r\n}\r\n\r\n// Reads a value from the underlying buffer.\r\nfunc (this *PacketReader" +
                    ") readString() (value string, err error) {\r\n\tsize, _ := this.readInt32()\r\n\tbuf  " +
                    ":= make([]byte, size)\r\n\tbinary.Read(this.buffer, binary.BigEndian, &buf)\r\n\tvalue" +
                    " = string(buf[:size])\r\n\treturn\r\n}\r\n\r\n\r\n");
            
            #line 117 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
 foreach(var type in Model.Types){ 
            
            #line default
            #line hidden
            this.Write("// Reads a value from the underlying buffer.\r\nfunc (this *PacketReader) readListO" +
                    "f");
            
            #line 119 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("() (value []");
            
            #line 119 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(type)));
            
            #line default
            #line hidden
            this.Write(", err error)  {\r\n\tsize, _ := this.readInt32()\r\n\tvalue = make([]");
            
            #line 121 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(type)));
            
            #line default
            #line hidden
            this.Write(", size)\r\n\tfor i := 0; i < int(size); i++ {\r\n\t\tvalue[i], _ = this.read");
            
            #line 123 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            
            #line default
            #line hidden
            this.Write("()\r\n\t}\r\n\treturn\r\n}\r\n\r\n");
            
            #line 128 "D:\Workspace\Spike.Build\Spike.Build.Go\PacketReader.t4"
 } 
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 12 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 14 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "TcpChannel") { 
            
            #line default
            #line hidden
            this.Write(" ");
            this.Write("import (\r\n\t\"net\"\r\n\t\"fmt\"\r\n\t\"io\"\r\n\t\"crypto/tls\"\r\n\t\"sync\"\r\n\t\"time\"\r\n) \r\n\r\ntype Chan" +
                    "nelState int\r\nconst (\r\n\tClosed ChannelState = iota\r\n\tOpen\r\n)\r\n\r\n// Represents a " +
                    "TCP/IP Channel to a Spike Engine server.\r\ntype TcpChannel struct {\r\n\tstate Chann" +
                    "elState\r\n\tconn net.Conn\r\n\tpipe chan []byte\r\n\tguard *sync.Mutex\r\n}\r\n\r\n\r\n// Connec" +
                    "ts to the address on the named network.\r\nfunc (this *TcpChannel) Connect(address" +
                    " string, bufferSize int) (net.Conn, error) {\r\n\t// Default is 8K\r\n\tif (bufferSize" +
                    " == 0){\r\n\t\tbufferSize = 8192\r\n\t}\r\n\r\n\t// Dial the TCP/IP\r\n\tconn, err := net.Dial(" +
                    "\"tcp\", address)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tthis.state = Open\r\n" +
                    "\tthis.conn = conn\r\n\tthis.guard = new(sync.Mutex)\r\n\r\n\t// Listen\r\n\tgo this.listen(" +
                    "bufferSize)\r\n\treturn conn, nil\r\n}\r\n\r\n// Dial connects to the given network addre" +
                    "ss using net.Dial\r\n// and then initiates a TLS handshake, returning the resultin" +
                    "g\r\n// TLS connection.\r\nfunc (this *TcpChannel) ConnectTLS(address string, buffer" +
                    "Size int, config *tls.Config) (net.Conn, error) {\r\n\t// Default is 8K\r\n\tif (buffe" +
                    "rSize == 0){\r\n\t\tbufferSize = 8192\r\n\t}\r\n\r\n\t// Dial the TCP/IP\r\n\tconn, err := tls." +
                    "Dial(\"tcp\", address, config)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tthis.s" +
                    "tate = Open\r\n\tthis.conn = conn\r\n\r\n\t// Listen\r\n\tgo this.listen(bufferSize)\r\n\tretu" +
                    "rn conn, nil\r\n}\r\n\r\n\r\n// Disconnects from the remote endpoint\r\nfunc (this *TcpCha" +
                    "nnel) Disconnect() (error){\r\n\tif (this.state != Open || this.conn == nil){\r\n\t\tre" +
                    "turn nil\r\n\t}\r\n\r\n\treturn this.conn.Close()\r\n}\r\n\r\n\r\n// Reads from the remote serve" +
                    "r\r\nfunc (this *TcpChannel) listen(bufferSize int) error {\r\n\tbuffer := make([]byt" +
                    "e, bufferSize)\r\n\r\n\tfor {\r\n\r\n\t\t// Read and close the connection on error\r\n       " +
                    " n, err := this.conn.Read(buffer)\r\n        if err != nil {\r\n            if err !" +
                    "= io.EOF {\r\n                this.conn.Close()\r\n        \t\tthis.state = Closed\r\n  " +
                    "      \t\treturn err\r\n            }\r\n            \r\n            time.Sleep(time.Mil" +
                    "lisecond * 10)\r\n        }\r\n        \r\n        \r\n\t\tif (n > 0){\r\n\t\t\tdata := buffer[" +
                    ":n]\r\n\t\t\tfmt.Println(data)\r\n\t\t\tfmt.Println(\"got\", n, \"bytes.\")\r\n\t\t\t//buf = append" +
                    "(buf, tmp[:n]...)\r\n\t\t}\r\n\r\n    }\r\n\r\n    return nil\r\n}\r\n\r\n\r\n\r\n// Sends a packet us" +
                    "ing the writer\r\nfunc (this *TcpChannel) sendPacket(key uint32, writer *PacketWri" +
                    "ter){\r\n\tlen := writer.buffer.Len() + 4\r\n\r\n\theader := make([]byte, 8)\r\n\theader[0]" +
                    " = byte(len >> 24)\r\n\theader[1] = byte(len >> 16)\r\n\theader[2] = byte(len >> 8)\r\n\t" +
                    "header[3] = byte(len)\r\n\theader[4] = byte(key >> 24)\r\n\theader[5] = byte(key >> 16" +
                    ")\r\n\theader[6] = byte(key >> 8)\r\n\theader[7] = byte(key)\r\n\r\n\t// Make sure this par" +
                    "t is synchronized\r\n\tthis.guard.Lock()\r\n\tdefer this.guard.Unlock()\r\n\tthis.conn.Wr" +
                    "ite(header)\r\n\twriter.buffer.WriteTo(this.conn)\r\n}\r\n\r\n\r\n");
            
            #line 136 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 foreach(var send in Model.Sends){ 
            
            #line default
            #line hidden
            this.Write("\t\t\r\nfunc (this *TcpChannel) ");
            
            #line 137 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(send.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 137 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
	
	var first = true;
	foreach(var member in send.Members){
		if(!first){
			Write(", ");
		}

		Write(member.Name.CamelCase());
		Write(" ");
		Write(GoBuilder.GetNativeType(member));
		first = false;
	}

            
            #line default
            #line hidden
            this.Write("){\r\n\twriter := NewPacketWriter()\r\n");
            
            #line 151 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 foreach(var member in send.Members){ 
            
            #line default
            #line hidden
            this.Write("\twriter.write");
            
            #line 152 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Type));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 152 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name.CamelCase()));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 153 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 } 
            
            #line default
            #line hidden
            
            #line 154 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 if(send.Compressed){ 
            
            #line default
            #line hidden
            this.Write("\twriter.Compress()\r\n");
            
            #line 156 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 } 
            
            #line default
            #line hidden
            this.Write("\tthis.sendPacket(0x");
            
            #line 157 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(send.Id.ToString("X")));
            
            #line default
            #line hidden
            this.Write(" , writer)\r\n}\t\t \r\n");
            
            #line 159 "D:\Workspace\Spike.Build\Spike.Build.Go\TcpChannel.t4"
 } 
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 14 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 15 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 if(Target == null || Target == "ComplexType") { 
            
            #line default
            #line hidden
            
            #line 1 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
 if (TargetType.Members.Any(m => m.Type == "DateTime")) { 
            
            #line default
            #line hidden
            this.Write("import \"time\"\r\n\r\n");
            
            #line 4 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
 } 
            
            #line default
            #line hidden
            this.Write("// Represents a serializable complex type ");
            
            #line 5 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write(".\r\ntype ");
            
            #line 6 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(TargetType.Name));
            
            #line default
            #line hidden
            this.Write(" struct {\r\n");
            
            #line 7 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
 foreach(var member in TargetType.Members){ 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t// Gets or sets the property \'");
            
            #line 8 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name));
            
            #line default
            #line hidden
            this.Write("\' of the complex type.\r\n\t");
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.Name.CamelCase()));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(member.IsList ? "[]" : string.Empty));
            
            #line default
            #line hidden
            
            #line 9 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
            this.Write(this.ToStringHelper.ToStringWithCulture(GoBuilder.GetNativeType(member)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 10 "D:\Workspace\Spike.Build\Spike.Build.Go\ComplexType.t4"
 } 
            
            #line default
            #line hidden
            this.Write("}");
            
            #line 15 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 17 "D:\Workspace\Spike.Build\Spike.Build.Go\GoTemplate.tt"
 public void Clear(){
	GenerationEnvironment.Clear();
} 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class GoTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
