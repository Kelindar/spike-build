// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Spike.Build.Java
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Fabian\Desktop\Projects\GitHub\spike-build\Spike.Build.Java\CLZFTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class CLZFTemplate : CLZFTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("package com.misakai.spike.network;\r\n\r\n/*\r\n * Copyright (c) 2005 Oren J. Maurice <" +
                    "oymaurice@hazorea.org.il>\r\n *\r\n * Redistribution and use in source and binary fo" +
                    "rms, with or without modifica-\r\n * tion, are permitted provided that the followi" +
                    "ng conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the" +
                    " above copyright notice,\r\n * this list of conditions and the following disclaime" +
                    "r.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r" +
                    "\n * notice, this list of conditions and the following disclaimer in the\r\n * docu" +
                    "mentation and/or other materials provided with the distribution.\r\n *\r\n * 3. The " +
                    "name of the author may not be used to endorse or promote products\r\n * derived fr" +
                    "om this software without specific prior written permission.\r\n *\r\n * THIS SOFTWAR" +
                    "E IS PROVIDED BY THE AUTHOR ``AS IS\'\' AND ANY EXPRESS OR IMPLIED\r\n * WARRANTIES," +
                    " INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\r\n * CHANTABILITY " +
                    "AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\r\n * EVENT SHALL THE A" +
                    "UTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\r\n * CIAL, EXEMPLARY, " +
                    "OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBS" +
                    "TITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRU" +
                    "PTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, S" +
                    "TRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\r\n * ERWISE) ARISING IN AN" +
                    "Y WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\r\n * OF THE POSSIBILITY OF" +
                    " SUCH DAMAGE.\r\n *\r\n * Alternatively, the contents of this file may be used under" +
                    " the terms of\r\n * the GNU General Public License version 2 (the \"GPL\"), in which" +
                    " case the\r\n * provisions of the GPL are applicable instead of the above. If you " +
                    "wish to\r\n * allow the use of your version of this file only under the terms of t" +
                    "he\r\n * GPL and not to allow others to use your version of this file under the\r\n " +
                    "* BSD license, indicate your decision by deleting the provisions above and\r\n * r" +
                    "eplace them with the notice and other provisions required by the GPL. If\r\n * you" +
                    " do not delete the provisions above, a recipient may use your version\r\n * of thi" +
                    "s file under either the BSD or the GPL.\r\n */\r\n\r\n\r\npublic class CLZF\r\n{\r\n\tstatic " +
                    "int HLOG=14;\r\n\tstatic int HSIZE=(1<<14);\r\n\r\n\t/*\r\n\t * don\'t play with this unless" +
                    " you benchmark!\r\n\t * decompression is not dependent on the hash function\r\n\t * th" +
                    "e hashing function might seem strange, just believe me\r\n\t * it works ;)\r\n\t */\r\n\t" +
                    "static int MAX_LIT=(1 << 5);\r\n\tstatic int MAX_OFF=(1 << 13);\r\n\tstatic int MAX_RE" +
                    "F=((1 << 8) + (1 << 3));\r\n\r\n\tstatic int FRST(byte[] Array,int ptr)\r\n\t{\r\n\t\treturn" +
                    " (int)((((Array[ptr]) << 8) & 0xff00) | (Array[ptr+1] & 0xff));\r\n\t}\r\n\r\n\tstatic i" +
                    "nt NEXT(int v,byte[] Array,int ptr)\r\n\t{\r\n\t\treturn ((v) << 8) | (Array[ptr+2] & 0" +
                    "xff);\r\n\t}\r\n\r\n\tstatic int IDX(int h)\r\n\t{\r\n\t\treturn ((((h ^ (h << 5)) >> (int) (3*" +
                    "8 - HLOG)) - h*5) & (HSIZE - 1));\r\n\t}\r\n\r\n\t/*\r\n\t * compressed format\r\n\t *\r\n\t * 00" +
                    "0LLLLL <L+1> ; literal\r\n\t * LLLOOOOO oooooooo ; backref L\r\n\t * 111OOOOO LLLLLLLL" +
                    " oooooooo ; backref L+7\r\n\t *\r\n\t */\r\n\r\n\tpublic static int compress (byte[] in_dat" +
                    "a, int in_len,byte[] out_data, int out_len)\r\n\t{\r\n\t\tint c;\r\n\t\tint []htab=new int[" +
                    "1<<14];\r\n\t\tfor (c=0;c<1<<14;c++)\r\n\t\t{\r\n\t\t\thtab[c]=0;\r\n\t\t}\r\n\r\n\t\tint hslot;\r\n\t\tint" +
                    " iidx = 0;\r\n\t\tint oidx = 0;\r\n\t\t//byte *in_end = ip + in_len;\r\n\t\t//byte *out_end " +
                    "= op + out_len;\r\n\t\tint reference;\r\n\r\n\t\tint hval = FRST (in_data,iidx);\r\n\t\tint of" +
                    "f;\r\n\t\tint lit = 0;\r\n\r\n\t\tfor (;;)\r\n\t\t{\r\n\t\t\tif (iidx < in_len - 2)\r\n\t\t\t{\r\n\t\t\t\thval" +
                    " = NEXT (hval, in_data,iidx);\r\n\t\t\t\thslot = IDX (hval);\r\n\t\t\t\treference = htab[hsl" +
                    "ot];\r\n\t\t\t\thtab[hslot] = (int)iidx;\r\n\r\n\t\t\t\tif ((off = iidx - reference - 1) < MAX" +
                    "_OFF\r\n\t\t\t\t\t\t&& iidx + 4 < in_len\r\n\t\t\t\t\t\t&& reference > 0\r\n\t\t\t\t\t\t&& in_data[refer" +
                    "ence+0] == in_data[iidx+0]\r\n\t\t\t\t\t\t\t\t&& in_data[reference+1] == in_data[iidx+1]\r\n" +
                    "\t\t\t\t\t\t\t\t\t\t&& in_data[reference+2] == in_data[iidx+2]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t{\r\n\t\t\t\t\t/* ma" +
                    "tch found at *reference++ */\r\n\t\t\t\t\tint len = 2;\r\n\t\t\t\t\tint maxlen = in_len - iidx" +
                    " - len;\r\n\t\t\t\t\tmaxlen = maxlen > MAX_REF ? MAX_REF : maxlen;\r\n\r\n\t\t\t\t\tif (oidx + l" +
                    "it + 1 + 3 >= out_len)\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tdo\r\n\t\t\t\t\t\tlen++;\r\n\t\t\t\t\twhile (le" +
                    "n < maxlen && in_data[reference+len] == in_data[iidx+len]);\r\n\r\n\t\t\t\t\tif (lit!=0)\r" +
                    "\n\t\t\t\t\t{\r\n\t\t\t\t\t\tout_data[oidx++] = (byte)(lit - 1);\r\n\t\t\t\t\t\tlit = -lit;\r\n\t\t\t\t\t\tdo\r" +
                    "\n\t\t\t\t\t\t\tout_data[oidx++] = in_data[iidx+lit];\r\n\t\t\t\t\t\twhile ((++lit)!=0);\r\n\t\t\t\t\t}" +
                    "\r\n\r\n\t\t\t\t\tlen -= 2;\r\n\t\t\t\t\tiidx++;\r\n\r\n\t\t\t\t\tif (len < 7)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tout_data[oi" +
                    "dx++] = (byte)((off >> 8) + (len << 5));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tout_d" +
                    "ata[oidx++] = (byte)((off >> 8) + ( 7 << 5));\r\n\t\t\t\t\t\tout_data[oidx++] = (byte)(l" +
                    "en - 7);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tout_data[oidx++] = (byte)off;\r\n\r\n\t\t\t\t\tiidx += len-1;\r\n\t" +
                    "\t\t\t\thval = FRST (in_data,iidx);\r\n\r\n\t\t\t\t\thval = NEXT (hval,in_data, iidx);\r\n\t\t\t\t\t" +
                    "htab[IDX (hval)] = iidx;\r\n\t\t\t\t\tiidx++;\r\n\r\n\t\t\t\t\thval = NEXT (hval, in_data,iidx);" +
                    "\r\n\t\t\t\t\thtab[IDX (hval)] = iidx;\r\n\t\t\t\t\tiidx++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\te" +
                    "lse if (iidx == in_len)\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t/* one more literal byte we must copy " +
                    "*/\r\n\t\t\tlit++;\r\n\t\t\tiidx++;\r\n\r\n\t\t\tif (lit == MAX_LIT)\r\n\t\t\t{\r\n\t\t\t\tif (oidx + 1 + MA" +
                    "X_LIT >= out_len)\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tout_data[oidx++] = (byte)(MAX_LIT - 1);" +
                    "\r\n\t\t\t\tlit = -lit;\r\n\t\t\t\tdo\r\n\t\t\t\t\tout_data[oidx++] = in_data[iidx+lit];\r\n\t\t\t\twhile" +
                    " ((++lit)!=0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (lit!=0)\r\n\t\t{\r\n\t\t\tif (oidx + lit + 1 >= out_le" +
                    "n)\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\tout_data[oidx++] = (byte)(lit - 1);\r\n\t\t\tlit = -lit;\r\n\t\t\t" +
                    "do\r\n\t\t\t\tout_data[oidx++] = in_data[iidx+lit];\r\n\t\t\twhile ((++lit)!=0);\r\n\t\t}\r\n\r\n\t\t" +
                    "return (int)oidx;\r\n\t}\r\n\r\n\t/// <summary>\r\n\t/// LZF Decompressor\r\n\t/// </summary>\r" +
                    "\n\tpublic static int decompress ( byte[] in_data, int in_len, byte[] out_data, in" +
                    "t out_len)\r\n\t{\r\n\t\tint iidx=0;\r\n\t\tint oidx=0;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tint ctrl = in_data" +
                    "[iidx++] & 0xff;\r\n\r\n\t\t\tif (ctrl < (1 << 5)) /* literal run */\r\n\t\t\t{\r\n\t\t\t\tctrl++;" +
                    "\r\n\r\n\t\t\t\tif (oidx + ctrl > out_len)\r\n\t\t\t\t{\r\n\t\t\t\t\t//SET_ERRNO (E2BIG);\r\n\t\t\t\t\tretur" +
                    "n 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdo\r\n\t\t\t\t\tout_data[oidx++] = in_data[iidx++];\r\n\t\t\t\twhile ((--c" +
                    "trl)!=0);\r\n\t\t\t}\r\n\t\t\telse /* back reference */\r\n\t\t\t{\r\n\t\t\t\tint len = ctrl >> 5;\r\n\r" +
                    "\n\t\t\tint reference = (int)(oidx - ((ctrl & 0x1f) << 8) - 1);\r\n\r\n\t\t\tif (len == 7)\r" +
                    "\n\t\t\t\tlen += in_data[iidx++] & 0xff;\r\n\t\t\treference -= in_data[iidx++] & 0xff;\r\n\r\n" +
                    "\t\t\tif (oidx + len + 2 > out_len)\r\n\t\t\t{\r\n\t\t\t\t//SET_ERRNO (E2BIG);\r\n\t\t\t\treturn 0;\r" +
                    "\n\t\t\t}\r\n\r\n\t\t\tif (reference < 0)\r\n\t\t\t{\r\n\t\t\t\t//SET_ERRNO (EINVAL);\r\n\t\t\t\treturn 0;\r\n" +
                    "\t\t\t}\r\n\r\n\t\t\tout_data[oidx++]=out_data[reference++];\r\n\t\t\tout_data[oidx++]=out_data" +
                    "[reference++];\r\n\r\n\t\t\tdo\r\n\t\t\t\tout_data[oidx++]=out_data[reference++];\r\n\t\t\twhile (" +
                    "(--len)!=0);\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (iidx < in_len);\r\n\r\n\t\treturn (int)oidx;\r\n\t}\r\n\r\n" +
                    "\tpublic CLZF()\r\n\t{\r\n\t\t//\r\n\t\t// TODO: Add constructor logic here\r\n\t\t//\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class CLZFTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
